// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram.proto

#include "histogram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bin_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinBoundaries_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinBoundaryDetailedSpec_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinBoundarySpec_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Breakdown_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateRange_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Diagnostic_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticMap_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticMap_DiagnosticMapEntry_DoNotUse_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericSet_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Histogram_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Histogram_AllBinsEntry_DoNotUse_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramSet_SharedDiagnosticsEntry_DoNotUse_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedEventSet_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedNameMap_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningStatistics_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryOptions_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAndDirection_histogram_2eproto;
namespace catapult {
namespace tracing {
namespace tracing {
namespace proto {
class UnitAndDirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitAndDirection> _instance;
} _UnitAndDirection_default_instance_;
class BinBoundaryDetailedSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinBoundaryDetailedSpec> _instance;
} _BinBoundaryDetailedSpec_default_instance_;
class BinBoundarySpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinBoundarySpec> _instance;
} _BinBoundarySpec_default_instance_;
class BinBoundariesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinBoundaries> _instance;
} _BinBoundaries_default_instance_;
class BreakdownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Breakdown> _instance;
} _Breakdown_default_instance_;
class DateRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateRange> _instance;
} _DateRange_default_instance_;
class GenericSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericSet> _instance;
} _GenericSet_default_instance_;
class RelatedEventSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedEventSet> _instance;
} _RelatedEventSet_default_instance_;
class RelatedNameMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedNameMap> _instance;
} _RelatedNameMap_default_instance_;
class ScalarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar> _instance;
} _Scalar_default_instance_;
class DiagnosticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnostic> _instance;
} _Diagnostic_default_instance_;
class DiagnosticMap_DiagnosticMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticMap_DiagnosticMapEntry_DoNotUse> _instance;
} _DiagnosticMap_DiagnosticMapEntry_DoNotUse_default_instance_;
class DiagnosticMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticMap> _instance;
} _DiagnosticMap_default_instance_;
class RunningStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunningStatistics> _instance;
} _RunningStatistics_default_instance_;
class BinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Bin> _instance;
} _Bin_default_instance_;
class SummaryOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryOptions> _instance;
} _SummaryOptions_default_instance_;
class Histogram_AllBinsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Histogram_AllBinsEntry_DoNotUse> _instance;
} _Histogram_AllBinsEntry_DoNotUse_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Histogram> _instance;
} _Histogram_default_instance_;
class HistogramSet_SharedDiagnosticsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramSet_SharedDiagnosticsEntry_DoNotUse> _instance;
} _HistogramSet_SharedDiagnosticsEntry_DoNotUse_default_instance_;
class HistogramSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramSet> _instance;
} _HistogramSet_default_instance_;
}  // namespace proto
}  // namespace tracing
}  // namespace tracing
}  // namespace catapult
static void InitDefaultsscc_info_Bin_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Bin_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Bin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Bin_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Bin_histogram_2eproto}, {
      &scc_info_DiagnosticMap_histogram_2eproto.base,}};

static void InitDefaultsscc_info_BinBoundaries_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_BinBoundaries_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::BinBoundaries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinBoundaries_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BinBoundaries_histogram_2eproto}, {
      &scc_info_BinBoundarySpec_histogram_2eproto.base,}};

static void InitDefaultsscc_info_BinBoundaryDetailedSpec_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_BinBoundaryDetailedSpec_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinBoundaryDetailedSpec_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BinBoundaryDetailedSpec_histogram_2eproto}, {}};

static void InitDefaultsscc_info_BinBoundarySpec_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_BinBoundarySpec_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::BinBoundarySpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinBoundarySpec_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BinBoundarySpec_histogram_2eproto}, {
      &scc_info_BinBoundaryDetailedSpec_histogram_2eproto.base,}};

static void InitDefaultsscc_info_Breakdown_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Breakdown_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Breakdown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Breakdown_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Breakdown_histogram_2eproto}, {}};

static void InitDefaultsscc_info_DateRange_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_DateRange_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::DateRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateRange_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DateRange_histogram_2eproto}, {}};

static void InitDefaultsscc_info_Diagnostic_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Diagnostic_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Diagnostic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Diagnostic_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Diagnostic_histogram_2eproto}, {
      &scc_info_Breakdown_histogram_2eproto.base,
      &scc_info_DateRange_histogram_2eproto.base,
      &scc_info_GenericSet_histogram_2eproto.base,
      &scc_info_RelatedEventSet_histogram_2eproto.base,
      &scc_info_RelatedNameMap_histogram_2eproto.base,
      &scc_info_Scalar_histogram_2eproto.base,}};

static void InitDefaultsscc_info_DiagnosticMap_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_DiagnosticMap_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::DiagnosticMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticMap_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiagnosticMap_histogram_2eproto}, {
      &scc_info_DiagnosticMap_DiagnosticMapEntry_DoNotUse_histogram_2eproto.base,}};

static void InitDefaultsscc_info_DiagnosticMap_DiagnosticMapEntry_DoNotUse_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_DiagnosticMap_DiagnosticMapEntry_DoNotUse_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::DiagnosticMap_DiagnosticMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiagnosticMap_DiagnosticMapEntry_DoNotUse_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiagnosticMap_DiagnosticMapEntry_DoNotUse_histogram_2eproto}, {
      &scc_info_Diagnostic_histogram_2eproto.base,}};

static void InitDefaultsscc_info_GenericSet_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_GenericSet_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::GenericSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericSet_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericSet_histogram_2eproto}, {}};

static void InitDefaultsscc_info_Histogram_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Histogram_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Histogram_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Histogram_histogram_2eproto}, {
      &scc_info_UnitAndDirection_histogram_2eproto.base,
      &scc_info_BinBoundaries_histogram_2eproto.base,
      &scc_info_DiagnosticMap_histogram_2eproto.base,
      &scc_info_RunningStatistics_histogram_2eproto.base,
      &scc_info_Histogram_AllBinsEntry_DoNotUse_histogram_2eproto.base,
      &scc_info_SummaryOptions_histogram_2eproto.base,}};

static void InitDefaultsscc_info_Histogram_AllBinsEntry_DoNotUse_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Histogram_AllBinsEntry_DoNotUse_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Histogram_AllBinsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Histogram_AllBinsEntry_DoNotUse_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Histogram_AllBinsEntry_DoNotUse_histogram_2eproto}, {
      &scc_info_Bin_histogram_2eproto.base,}};

static void InitDefaultsscc_info_HistogramSet_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_HistogramSet_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::HistogramSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HistogramSet_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HistogramSet_histogram_2eproto}, {
      &scc_info_Histogram_histogram_2eproto.base,
      &scc_info_HistogramSet_SharedDiagnosticsEntry_DoNotUse_histogram_2eproto.base,}};

static void InitDefaultsscc_info_HistogramSet_SharedDiagnosticsEntry_DoNotUse_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_HistogramSet_SharedDiagnosticsEntry_DoNotUse_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::HistogramSet_SharedDiagnosticsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramSet_SharedDiagnosticsEntry_DoNotUse_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistogramSet_SharedDiagnosticsEntry_DoNotUse_histogram_2eproto}, {
      &scc_info_Diagnostic_histogram_2eproto.base,}};

static void InitDefaultsscc_info_RelatedEventSet_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_RelatedEventSet_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::RelatedEventSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedEventSet_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelatedEventSet_histogram_2eproto}, {}};

static void InitDefaultsscc_info_RelatedNameMap_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_RelatedNameMap_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::RelatedNameMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedNameMap_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelatedNameMap_histogram_2eproto}, {}};

static void InitDefaultsscc_info_RunningStatistics_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_RunningStatistics_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::RunningStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningStatistics_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunningStatistics_histogram_2eproto}, {}};

static void InitDefaultsscc_info_Scalar_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_Scalar_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::Scalar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scalar_histogram_2eproto}, {}};

static void InitDefaultsscc_info_SummaryOptions_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_SummaryOptions_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::SummaryOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryOptions_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryOptions_histogram_2eproto}, {}};

static void InitDefaultsscc_info_UnitAndDirection_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::catapult::tracing::tracing::proto::_UnitAndDirection_default_instance_;
    new (ptr) ::catapult::tracing::tracing::proto::UnitAndDirection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAndDirection_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitAndDirection_histogram_2eproto}, {}};

namespace catapult {
namespace tracing {
namespace tracing {
namespace proto {
bool BinBoundaryDetailedSpec_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BinBoundaryDetailedSpec_Type_strings[2] = {};

static const char BinBoundaryDetailedSpec_Type_names[] =
  "EXPONENTIAL"
  "LINEAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BinBoundaryDetailedSpec_Type_entries[] = {
  { {BinBoundaryDetailedSpec_Type_names + 0, 11}, 1 },
  { {BinBoundaryDetailedSpec_Type_names + 11, 6}, 0 },
};

static const int BinBoundaryDetailedSpec_Type_entries_by_number[] = {
  1, // 0 -> LINEAR
  0, // 1 -> EXPONENTIAL
};

const std::string& BinBoundaryDetailedSpec_Type_Name(
    BinBoundaryDetailedSpec_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BinBoundaryDetailedSpec_Type_entries,
          BinBoundaryDetailedSpec_Type_entries_by_number,
          2, BinBoundaryDetailedSpec_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BinBoundaryDetailedSpec_Type_entries,
      BinBoundaryDetailedSpec_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BinBoundaryDetailedSpec_Type_strings[idx].get();
}
bool BinBoundaryDetailedSpec_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BinBoundaryDetailedSpec_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BinBoundaryDetailedSpec_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<BinBoundaryDetailedSpec_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BinBoundaryDetailedSpec_Type BinBoundaryDetailedSpec::LINEAR;
constexpr BinBoundaryDetailedSpec_Type BinBoundaryDetailedSpec::EXPONENTIAL;
constexpr BinBoundaryDetailedSpec_Type BinBoundaryDetailedSpec::Type_MIN;
constexpr BinBoundaryDetailedSpec_Type BinBoundaryDetailedSpec::Type_MAX;
constexpr int BinBoundaryDetailedSpec::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ImprovementDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ImprovementDirection_strings[3] = {};

static const char ImprovementDirection_names[] =
  "BIGGER_IS_BETTER"
  "NOT_SPECIFIED"
  "SMALLER_IS_BETTER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ImprovementDirection_entries[] = {
  { {ImprovementDirection_names + 0, 16}, 1 },
  { {ImprovementDirection_names + 16, 13}, 0 },
  { {ImprovementDirection_names + 29, 17}, 2 },
};

static const int ImprovementDirection_entries_by_number[] = {
  1, // 0 -> NOT_SPECIFIED
  0, // 1 -> BIGGER_IS_BETTER
  2, // 2 -> SMALLER_IS_BETTER
};

const std::string& ImprovementDirection_Name(
    ImprovementDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ImprovementDirection_entries,
          ImprovementDirection_entries_by_number,
          3, ImprovementDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ImprovementDirection_entries,
      ImprovementDirection_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ImprovementDirection_strings[idx].get();
}
bool ImprovementDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImprovementDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ImprovementDirection_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ImprovementDirection>(int_value);
  }
  return success;
}
bool Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Unit_strings[15] = {};

static const char Unit_names[] =
  "A"
  "AH"
  "BYTES_PER_SECOND"
  "COUNT"
  "HERTZ"
  "J"
  "MS"
  "MS_BEST_FIT_FORMAT"
  "N_PERCENT"
  "SIGMA"
  "SIZE_IN_BYTES"
  "TS_MS"
  "UNITLESS"
  "V"
  "W";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Unit_entries[] = {
  { {Unit_names + 0, 1}, 8 },
  { {Unit_names + 1, 2}, 14 },
  { {Unit_names + 3, 16}, 5 },
  { {Unit_names + 19, 5}, 12 },
  { {Unit_names + 24, 5}, 10 },
  { {Unit_names + 29, 1}, 6 },
  { {Unit_names + 30, 2}, 0 },
  { {Unit_names + 32, 18}, 1 },
  { {Unit_names + 50, 9}, 3 },
  { {Unit_names + 59, 5}, 13 },
  { {Unit_names + 64, 13}, 4 },
  { {Unit_names + 77, 5}, 2 },
  { {Unit_names + 82, 8}, 11 },
  { {Unit_names + 90, 1}, 9 },
  { {Unit_names + 91, 1}, 7 },
};

static const int Unit_entries_by_number[] = {
  6, // 0 -> MS
  7, // 1 -> MS_BEST_FIT_FORMAT
  11, // 2 -> TS_MS
  8, // 3 -> N_PERCENT
  10, // 4 -> SIZE_IN_BYTES
  2, // 5 -> BYTES_PER_SECOND
  5, // 6 -> J
  14, // 7 -> W
  0, // 8 -> A
  13, // 9 -> V
  4, // 10 -> HERTZ
  12, // 11 -> UNITLESS
  3, // 12 -> COUNT
  9, // 13 -> SIGMA
  1, // 14 -> AH
};

const std::string& Unit_Name(
    Unit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Unit_entries,
          Unit_entries_by_number,
          15, Unit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Unit_entries,
      Unit_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Unit_strings[idx].get();
}
bool Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Unit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Unit_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<Unit>(int_value);
  }
  return success;
}

// ===================================================================

class UnitAndDirection::_Internal {
 public:
};

UnitAndDirection::UnitAndDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.UnitAndDirection)
}
UnitAndDirection::UnitAndDirection(const UnitAndDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&improvement_direction_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(improvement_direction_));
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.UnitAndDirection)
}

void UnitAndDirection::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&improvement_direction_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(improvement_direction_));
}

UnitAndDirection::~UnitAndDirection() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.UnitAndDirection)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnitAndDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitAndDirection::ArenaDtor(void* object) {
  UnitAndDirection* _this = reinterpret_cast< UnitAndDirection* >(object);
  (void)_this;
}
void UnitAndDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitAndDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitAndDirection& UnitAndDirection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitAndDirection_histogram_2eproto.base);
  return *internal_default_instance();
}


void UnitAndDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.UnitAndDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&improvement_direction_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(improvement_direction_));
  _internal_metadata_.Clear<std::string>();
}

const char* UnitAndDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .catapult.tracing.tracing.proto.Unit unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::catapult::tracing::tracing::proto::Unit>(val));
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.ImprovementDirection improvement_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_improvement_direction(static_cast<::catapult::tracing::tracing::proto::ImprovementDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitAndDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.UnitAndDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .catapult.tracing.tracing.proto.Unit unit = 1;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_unit(), target);
  }

  // .catapult.tracing.tracing.proto.ImprovementDirection improvement_direction = 2;
  if (this->improvement_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_improvement_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.UnitAndDirection)
  return target;
}

size_t UnitAndDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.UnitAndDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .catapult.tracing.tracing.proto.Unit unit = 1;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  // .catapult.tracing.tracing.proto.ImprovementDirection improvement_direction = 2;
  if (this->improvement_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_improvement_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitAndDirection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnitAndDirection*>(
      &from));
}

void UnitAndDirection::MergeFrom(const UnitAndDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.UnitAndDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (from.improvement_direction() != 0) {
    _internal_set_improvement_direction(from._internal_improvement_direction());
  }
}

void UnitAndDirection::CopyFrom(const UnitAndDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.UnitAndDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAndDirection::IsInitialized() const {
  return true;
}

void UnitAndDirection::InternalSwap(UnitAndDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitAndDirection, improvement_direction_)
      + sizeof(UnitAndDirection::improvement_direction_)
      - PROTOBUF_FIELD_OFFSET(UnitAndDirection, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

std::string UnitAndDirection::GetTypeName() const {
  return "catapult.tracing.tracing.proto.UnitAndDirection";
}


// ===================================================================

class BinBoundaryDetailedSpec::_Internal {
 public:
};

BinBoundaryDetailedSpec::BinBoundaryDetailedSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
}
BinBoundaryDetailedSpec::BinBoundaryDetailedSpec(const BinBoundaryDetailedSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&maximum_bin_boundary_, &from.maximum_bin_boundary_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bin_boundaries_) -
    reinterpret_cast<char*>(&maximum_bin_boundary_)) + sizeof(num_bin_boundaries_));
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
}

void BinBoundaryDetailedSpec::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_bin_boundary_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_bin_boundaries_) -
      reinterpret_cast<char*>(&maximum_bin_boundary_)) + sizeof(num_bin_boundaries_));
}

BinBoundaryDetailedSpec::~BinBoundaryDetailedSpec() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BinBoundaryDetailedSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BinBoundaryDetailedSpec::ArenaDtor(void* object) {
  BinBoundaryDetailedSpec* _this = reinterpret_cast< BinBoundaryDetailedSpec* >(object);
  (void)_this;
}
void BinBoundaryDetailedSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinBoundaryDetailedSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinBoundaryDetailedSpec& BinBoundaryDetailedSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinBoundaryDetailedSpec_histogram_2eproto.base);
  return *internal_default_instance();
}


void BinBoundaryDetailedSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maximum_bin_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bin_boundaries_) -
      reinterpret_cast<char*>(&maximum_bin_boundary_)) + sizeof(num_bin_boundaries_));
  _internal_metadata_.Clear<std::string>();
}

const char* BinBoundaryDetailedSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec.Type boundary_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_boundary_type(static_cast<::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec_Type>(val));
        } else goto handle_unusual;
        continue;
      // double maximum_bin_boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          maximum_bin_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 num_bin_boundaries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_bin_boundaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinBoundaryDetailedSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec.Type boundary_type = 1;
  if (this->boundary_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_boundary_type(), target);
  }

  // double maximum_bin_boundary = 2;
  if (!(this->maximum_bin_boundary() <= 0 && this->maximum_bin_boundary() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_maximum_bin_boundary(), target);
  }

  // int32 num_bin_boundaries = 3;
  if (this->num_bin_boundaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_bin_boundaries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  return target;
}

size_t BinBoundaryDetailedSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double maximum_bin_boundary = 2;
  if (!(this->maximum_bin_boundary() <= 0 && this->maximum_bin_boundary() >= 0)) {
    total_size += 1 + 8;
  }

  // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec.Type boundary_type = 1;
  if (this->boundary_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_boundary_type());
  }

  // int32 num_bin_boundaries = 3;
  if (this->num_bin_boundaries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_bin_boundaries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinBoundaryDetailedSpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BinBoundaryDetailedSpec*>(
      &from));
}

void BinBoundaryDetailedSpec::MergeFrom(const BinBoundaryDetailedSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.maximum_bin_boundary() <= 0 && from.maximum_bin_boundary() >= 0)) {
    _internal_set_maximum_bin_boundary(from._internal_maximum_bin_boundary());
  }
  if (from.boundary_type() != 0) {
    _internal_set_boundary_type(from._internal_boundary_type());
  }
  if (from.num_bin_boundaries() != 0) {
    _internal_set_num_bin_boundaries(from._internal_num_bin_boundaries());
  }
}

void BinBoundaryDetailedSpec::CopyFrom(const BinBoundaryDetailedSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.BinBoundaryDetailedSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinBoundaryDetailedSpec::IsInitialized() const {
  return true;
}

void BinBoundaryDetailedSpec::InternalSwap(BinBoundaryDetailedSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinBoundaryDetailedSpec, num_bin_boundaries_)
      + sizeof(BinBoundaryDetailedSpec::num_bin_boundaries_)
      - PROTOBUF_FIELD_OFFSET(BinBoundaryDetailedSpec, maximum_bin_boundary_)>(
          reinterpret_cast<char*>(&maximum_bin_boundary_),
          reinterpret_cast<char*>(&other->maximum_bin_boundary_));
}

std::string BinBoundaryDetailedSpec::GetTypeName() const {
  return "catapult.tracing.tracing.proto.BinBoundaryDetailedSpec";
}


// ===================================================================

class BinBoundarySpec::_Internal {
 public:
  static const ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec& bin_spec(const BinBoundarySpec* msg);
};

const ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec&
BinBoundarySpec::_Internal::bin_spec(const BinBoundarySpec* msg) {
  return *msg->boundary_oneof_.bin_spec_;
}
void BinBoundarySpec::set_allocated_bin_spec(::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec* bin_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_boundary_oneof();
  if (bin_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bin_spec);
    if (message_arena != submessage_arena) {
      bin_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin_spec, submessage_arena);
    }
    set_has_bin_spec();
    boundary_oneof_.bin_spec_ = bin_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.BinBoundarySpec.bin_spec)
}
BinBoundarySpec::BinBoundarySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.BinBoundarySpec)
}
BinBoundarySpec::BinBoundarySpec(const BinBoundarySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_boundary_oneof();
  switch (from.boundary_oneof_case()) {
    case kBinBoundary: {
      _internal_set_bin_boundary(from._internal_bin_boundary());
      break;
    }
    case kBinSpec: {
      _internal_mutable_bin_spec()->::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec::MergeFrom(from._internal_bin_spec());
      break;
    }
    case BOUNDARY_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.BinBoundarySpec)
}

void BinBoundarySpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinBoundarySpec_histogram_2eproto.base);
  clear_has_boundary_oneof();
}

BinBoundarySpec::~BinBoundarySpec() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.BinBoundarySpec)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BinBoundarySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_boundary_oneof()) {
    clear_boundary_oneof();
  }
}

void BinBoundarySpec::ArenaDtor(void* object) {
  BinBoundarySpec* _this = reinterpret_cast< BinBoundarySpec* >(object);
  (void)_this;
}
void BinBoundarySpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinBoundarySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinBoundarySpec& BinBoundarySpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinBoundarySpec_histogram_2eproto.base);
  return *internal_default_instance();
}


void BinBoundarySpec::clear_boundary_oneof() {
// @@protoc_insertion_point(one_of_clear_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  switch (boundary_oneof_case()) {
    case kBinBoundary: {
      // No need to clear
      break;
    }
    case kBinSpec: {
      if (GetArena() == nullptr) {
        delete boundary_oneof_.bin_spec_;
      }
      break;
    }
    case BOUNDARY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BOUNDARY_ONEOF_NOT_SET;
}


void BinBoundarySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_boundary_oneof();
  _internal_metadata_.Clear<std::string>();
}

const char* BinBoundarySpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double bin_boundary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_bin_boundary(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec bin_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bin_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinBoundarySpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double bin_boundary = 1;
  if (_internal_has_bin_boundary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bin_boundary(), target);
  }

  // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec bin_spec = 2;
  if (_internal_has_bin_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bin_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.BinBoundarySpec)
  return target;
}

size_t BinBoundarySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (boundary_oneof_case()) {
    // double bin_boundary = 1;
    case kBinBoundary: {
      total_size += 1 + 8;
      break;
    }
    // .catapult.tracing.tracing.proto.BinBoundaryDetailedSpec bin_spec = 2;
    case kBinSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boundary_oneof_.bin_spec_);
      break;
    }
    case BOUNDARY_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinBoundarySpec::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BinBoundarySpec*>(
      &from));
}

void BinBoundarySpec::MergeFrom(const BinBoundarySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.boundary_oneof_case()) {
    case kBinBoundary: {
      _internal_set_bin_boundary(from._internal_bin_boundary());
      break;
    }
    case kBinSpec: {
      _internal_mutable_bin_spec()->::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec::MergeFrom(from._internal_bin_spec());
      break;
    }
    case BOUNDARY_ONEOF_NOT_SET: {
      break;
    }
  }
}

void BinBoundarySpec::CopyFrom(const BinBoundarySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.BinBoundarySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinBoundarySpec::IsInitialized() const {
  return true;
}

void BinBoundarySpec::InternalSwap(BinBoundarySpec* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(boundary_oneof_, other->boundary_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string BinBoundarySpec::GetTypeName() const {
  return "catapult.tracing.tracing.proto.BinBoundarySpec";
}


// ===================================================================

class BinBoundaries::_Internal {
 public:
};

BinBoundaries::BinBoundaries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  bin_specs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.BinBoundaries)
}
BinBoundaries::BinBoundaries(const BinBoundaries& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      bin_specs_(from.bin_specs_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  first_bin_boundary_ = from.first_bin_boundary_;
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.BinBoundaries)
}

void BinBoundaries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinBoundaries_histogram_2eproto.base);
  first_bin_boundary_ = 0;
}

BinBoundaries::~BinBoundaries() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.BinBoundaries)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BinBoundaries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BinBoundaries::ArenaDtor(void* object) {
  BinBoundaries* _this = reinterpret_cast< BinBoundaries* >(object);
  (void)_this;
}
void BinBoundaries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinBoundaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinBoundaries& BinBoundaries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinBoundaries_histogram_2eproto.base);
  return *internal_default_instance();
}


void BinBoundaries::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.BinBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_specs_.Clear();
  first_bin_boundary_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* BinBoundaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double first_bin_boundary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          first_bin_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .catapult.tracing.tracing.proto.BinBoundarySpec bin_specs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinBoundaries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.BinBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double first_bin_boundary = 1;
  if (!(this->first_bin_boundary() <= 0 && this->first_bin_boundary() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_first_bin_boundary(), target);
  }

  // repeated .catapult.tracing.tracing.proto.BinBoundarySpec bin_specs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bin_specs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bin_specs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.BinBoundaries)
  return target;
}

size_t BinBoundaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.BinBoundaries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .catapult.tracing.tracing.proto.BinBoundarySpec bin_specs = 2;
  total_size += 1UL * this->_internal_bin_specs_size();
  for (const auto& msg : this->bin_specs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double first_bin_boundary = 1;
  if (!(this->first_bin_boundary() <= 0 && this->first_bin_boundary() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinBoundaries::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BinBoundaries*>(
      &from));
}

void BinBoundaries::MergeFrom(const BinBoundaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.BinBoundaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bin_specs_.MergeFrom(from.bin_specs_);
  if (!(from.first_bin_boundary() <= 0 && from.first_bin_boundary() >= 0)) {
    _internal_set_first_bin_boundary(from._internal_first_bin_boundary());
  }
}

void BinBoundaries::CopyFrom(const BinBoundaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.BinBoundaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinBoundaries::IsInitialized() const {
  return true;
}

void BinBoundaries::InternalSwap(BinBoundaries* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  bin_specs_.InternalSwap(&other->bin_specs_);
  swap(first_bin_boundary_, other->first_bin_boundary_);
}

std::string BinBoundaries::GetTypeName() const {
  return "catapult.tracing.tracing.proto.BinBoundaries";
}


// ===================================================================

class Breakdown::_Internal {
 public:
};

Breakdown::Breakdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.Breakdown)
}
Breakdown::Breakdown(const Breakdown& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.Breakdown)
}

void Breakdown::SharedCtor() {
}

Breakdown::~Breakdown() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.Breakdown)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Breakdown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Breakdown::ArenaDtor(void* object) {
  Breakdown* _this = reinterpret_cast< Breakdown* >(object);
  (void)_this;
}
void Breakdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Breakdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Breakdown& Breakdown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Breakdown_histogram_2eproto.base);
  return *internal_default_instance();
}


void Breakdown::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.Breakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Breakdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Breakdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.Breakdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.Breakdown)
  return target;
}

size_t Breakdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.Breakdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Breakdown::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Breakdown*>(
      &from));
}

void Breakdown::MergeFrom(const Breakdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.Breakdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Breakdown::CopyFrom(const Breakdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.Breakdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breakdown::IsInitialized() const {
  return true;
}

void Breakdown::InternalSwap(Breakdown* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Breakdown::GetTypeName() const {
  return "catapult.tracing.tracing.proto.Breakdown";
}


// ===================================================================

class DateRange::_Internal {
 public:
};

DateRange::DateRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.DateRange)
}
DateRange::DateRange(const DateRange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.DateRange)
}

void DateRange::SharedCtor() {
}

DateRange::~DateRange() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.DateRange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DateRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DateRange::ArenaDtor(void* object) {
  DateRange* _this = reinterpret_cast< DateRange* >(object);
  (void)_this;
}
void DateRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateRange& DateRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateRange_histogram_2eproto.base);
  return *internal_default_instance();
}


void DateRange::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.DateRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DateRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.DateRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.DateRange)
  return target;
}

size_t DateRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.DateRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateRange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DateRange*>(
      &from));
}

void DateRange::MergeFrom(const DateRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DateRange::CopyFrom(const DateRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateRange::IsInitialized() const {
  return true;
}

void DateRange::InternalSwap(DateRange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string DateRange::GetTypeName() const {
  return "catapult.tracing.tracing.proto.DateRange";
}


// ===================================================================

class GenericSet::_Internal {
 public:
};

GenericSet::GenericSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.GenericSet)
}
GenericSet::GenericSet(const GenericSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.GenericSet)
}

void GenericSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericSet_histogram_2eproto.base);
}

GenericSet::~GenericSet() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.GenericSet)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GenericSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GenericSet::ArenaDtor(void* object) {
  GenericSet* _this = reinterpret_cast< GenericSet* >(object);
  (void)_this;
}
void GenericSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericSet& GenericSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericSet_histogram_2eproto.base);
  return *internal_default_instance();
}


void GenericSet::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.GenericSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.GenericSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "catapult.tracing.tracing.proto.GenericSet.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.GenericSet)
  return target;
}

size_t GenericSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.GenericSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericSet*>(
      &from));
}

void GenericSet::MergeFrom(const GenericSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.GenericSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void GenericSet::CopyFrom(const GenericSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.GenericSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSet::IsInitialized() const {
  return true;
}

void GenericSet::InternalSwap(GenericSet* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string GenericSet::GetTypeName() const {
  return "catapult.tracing.tracing.proto.GenericSet";
}


// ===================================================================

class RelatedEventSet::_Internal {
 public:
};

RelatedEventSet::RelatedEventSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.RelatedEventSet)
}
RelatedEventSet::RelatedEventSet(const RelatedEventSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.RelatedEventSet)
}

void RelatedEventSet::SharedCtor() {
}

RelatedEventSet::~RelatedEventSet() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.RelatedEventSet)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelatedEventSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelatedEventSet::ArenaDtor(void* object) {
  RelatedEventSet* _this = reinterpret_cast< RelatedEventSet* >(object);
  (void)_this;
}
void RelatedEventSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedEventSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedEventSet& RelatedEventSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedEventSet_histogram_2eproto.base);
  return *internal_default_instance();
}


void RelatedEventSet::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.RelatedEventSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* RelatedEventSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedEventSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.RelatedEventSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.RelatedEventSet)
  return target;
}

size_t RelatedEventSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.RelatedEventSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedEventSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelatedEventSet*>(
      &from));
}

void RelatedEventSet::MergeFrom(const RelatedEventSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.RelatedEventSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RelatedEventSet::CopyFrom(const RelatedEventSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.RelatedEventSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedEventSet::IsInitialized() const {
  return true;
}

void RelatedEventSet::InternalSwap(RelatedEventSet* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string RelatedEventSet::GetTypeName() const {
  return "catapult.tracing.tracing.proto.RelatedEventSet";
}


// ===================================================================

class RelatedNameMap::_Internal {
 public:
};

RelatedNameMap::RelatedNameMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.RelatedNameMap)
}
RelatedNameMap::RelatedNameMap(const RelatedNameMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.RelatedNameMap)
}

void RelatedNameMap::SharedCtor() {
}

RelatedNameMap::~RelatedNameMap() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.RelatedNameMap)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelatedNameMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelatedNameMap::ArenaDtor(void* object) {
  RelatedNameMap* _this = reinterpret_cast< RelatedNameMap* >(object);
  (void)_this;
}
void RelatedNameMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedNameMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedNameMap& RelatedNameMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedNameMap_histogram_2eproto.base);
  return *internal_default_instance();
}


void RelatedNameMap::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.RelatedNameMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* RelatedNameMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedNameMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.RelatedNameMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.RelatedNameMap)
  return target;
}

size_t RelatedNameMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.RelatedNameMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedNameMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelatedNameMap*>(
      &from));
}

void RelatedNameMap::MergeFrom(const RelatedNameMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.RelatedNameMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RelatedNameMap::CopyFrom(const RelatedNameMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.RelatedNameMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedNameMap::IsInitialized() const {
  return true;
}

void RelatedNameMap::InternalSwap(RelatedNameMap* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string RelatedNameMap::GetTypeName() const {
  return "catapult.tracing.tracing.proto.RelatedNameMap";
}


// ===================================================================

class Scalar::_Internal {
 public:
};

Scalar::Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.Scalar)
}

void Scalar::SharedCtor() {
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.Scalar)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Scalar::ArenaDtor(void* object) {
  Scalar* _this = reinterpret_cast< Scalar* >(object);
  (void)_this;
}
void Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar& Scalar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar_histogram_2eproto.base);
  return *internal_default_instance();
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.Scalar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Scalar*>(
      &from));
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Scalar::GetTypeName() const {
  return "catapult.tracing.tracing.proto.Scalar";
}


// ===================================================================

class Diagnostic::_Internal {
 public:
  static const ::catapult::tracing::tracing::proto::Breakdown& breakdown(const Diagnostic* msg);
  static const ::catapult::tracing::tracing::proto::DateRange& date_range(const Diagnostic* msg);
  static const ::catapult::tracing::tracing::proto::GenericSet& generic_set(const Diagnostic* msg);
  static const ::catapult::tracing::tracing::proto::RelatedEventSet& related_event_set(const Diagnostic* msg);
  static const ::catapult::tracing::tracing::proto::RelatedNameMap& related_name_map(const Diagnostic* msg);
  static const ::catapult::tracing::tracing::proto::Scalar& scalar(const Diagnostic* msg);
};

const ::catapult::tracing::tracing::proto::Breakdown&
Diagnostic::_Internal::breakdown(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.breakdown_;
}
const ::catapult::tracing::tracing::proto::DateRange&
Diagnostic::_Internal::date_range(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.date_range_;
}
const ::catapult::tracing::tracing::proto::GenericSet&
Diagnostic::_Internal::generic_set(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.generic_set_;
}
const ::catapult::tracing::tracing::proto::RelatedEventSet&
Diagnostic::_Internal::related_event_set(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.related_event_set_;
}
const ::catapult::tracing::tracing::proto::RelatedNameMap&
Diagnostic::_Internal::related_name_map(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.related_name_map_;
}
const ::catapult::tracing::tracing::proto::Scalar&
Diagnostic::_Internal::scalar(const Diagnostic* msg) {
  return *msg->diagnostic_oneof_.scalar_;
}
void Diagnostic::set_allocated_breakdown(::catapult::tracing::tracing::proto::Breakdown* breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(breakdown);
    if (message_arena != submessage_arena) {
      breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, breakdown, submessage_arena);
    }
    set_has_breakdown();
    diagnostic_oneof_.breakdown_ = breakdown;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.breakdown)
}
void Diagnostic::set_allocated_date_range(::catapult::tracing::tracing::proto::DateRange* date_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (date_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date_range);
    if (message_arena != submessage_arena) {
      date_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_range, submessage_arena);
    }
    set_has_date_range();
    diagnostic_oneof_.date_range_ = date_range;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.date_range)
}
void Diagnostic::set_allocated_generic_set(::catapult::tracing::tracing::proto::GenericSet* generic_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (generic_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generic_set);
    if (message_arena != submessage_arena) {
      generic_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_set, submessage_arena);
    }
    set_has_generic_set();
    diagnostic_oneof_.generic_set_ = generic_set;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.generic_set)
}
void Diagnostic::set_allocated_related_event_set(::catapult::tracing::tracing::proto::RelatedEventSet* related_event_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (related_event_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(related_event_set);
    if (message_arena != submessage_arena) {
      related_event_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, related_event_set, submessage_arena);
    }
    set_has_related_event_set();
    diagnostic_oneof_.related_event_set_ = related_event_set;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.related_event_set)
}
void Diagnostic::set_allocated_related_name_map(::catapult::tracing::tracing::proto::RelatedNameMap* related_name_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (related_name_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(related_name_map);
    if (message_arena != submessage_arena) {
      related_name_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, related_name_map, submessage_arena);
    }
    set_has_related_name_map();
    diagnostic_oneof_.related_name_map_ = related_name_map;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.related_name_map)
}
void Diagnostic::set_allocated_scalar(::catapult::tracing::tracing::proto::Scalar* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostic_oneof();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalar);
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    diagnostic_oneof_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:catapult.tracing.tracing.proto.Diagnostic.scalar)
}
Diagnostic::Diagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.Diagnostic)
}
Diagnostic::Diagnostic(const Diagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_diagnostic_oneof();
  switch (from.diagnostic_oneof_case()) {
    case kBreakdown: {
      _internal_mutable_breakdown()->::catapult::tracing::tracing::proto::Breakdown::MergeFrom(from._internal_breakdown());
      break;
    }
    case kDateRange: {
      _internal_mutable_date_range()->::catapult::tracing::tracing::proto::DateRange::MergeFrom(from._internal_date_range());
      break;
    }
    case kGenericSet: {
      _internal_mutable_generic_set()->::catapult::tracing::tracing::proto::GenericSet::MergeFrom(from._internal_generic_set());
      break;
    }
    case kRelatedEventSet: {
      _internal_mutable_related_event_set()->::catapult::tracing::tracing::proto::RelatedEventSet::MergeFrom(from._internal_related_event_set());
      break;
    }
    case kRelatedNameMap: {
      _internal_mutable_related_name_map()->::catapult::tracing::tracing::proto::RelatedNameMap::MergeFrom(from._internal_related_name_map());
      break;
    }
    case kScalar: {
      _internal_mutable_scalar()->::catapult::tracing::tracing::proto::Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kSharedDiagnosticGuid: {
      _internal_set_shared_diagnostic_guid(from._internal_shared_diagnostic_guid());
      break;
    }
    case DIAGNOSTIC_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.Diagnostic)
}

void Diagnostic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnostic_histogram_2eproto.base);
  clear_has_diagnostic_oneof();
}

Diagnostic::~Diagnostic() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.Diagnostic)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Diagnostic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_diagnostic_oneof()) {
    clear_diagnostic_oneof();
  }
}

void Diagnostic::ArenaDtor(void* object) {
  Diagnostic* _this = reinterpret_cast< Diagnostic* >(object);
  (void)_this;
}
void Diagnostic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Diagnostic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnostic& Diagnostic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnostic_histogram_2eproto.base);
  return *internal_default_instance();
}


void Diagnostic::clear_diagnostic_oneof() {
// @@protoc_insertion_point(one_of_clear_start:catapult.tracing.tracing.proto.Diagnostic)
  switch (diagnostic_oneof_case()) {
    case kBreakdown: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.breakdown_;
      }
      break;
    }
    case kDateRange: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.date_range_;
      }
      break;
    }
    case kGenericSet: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.generic_set_;
      }
      break;
    }
    case kRelatedEventSet: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.related_event_set_;
      }
      break;
    }
    case kRelatedNameMap: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.related_name_map_;
      }
      break;
    }
    case kScalar: {
      if (GetArena() == nullptr) {
        delete diagnostic_oneof_.scalar_;
      }
      break;
    }
    case kSharedDiagnosticGuid: {
      diagnostic_oneof_.shared_diagnostic_guid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case DIAGNOSTIC_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DIAGNOSTIC_ONEOF_NOT_SET;
}


void Diagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.Diagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_diagnostic_oneof();
  _internal_metadata_.Clear<std::string>();
}

const char* Diagnostic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .catapult.tracing.tracing.proto.Breakdown breakdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_breakdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.DateRange date_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.GenericSet generic_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.RelatedEventSet related_event_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_related_event_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.RelatedNameMap related_name_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_related_name_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.Scalar scalar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shared_diagnostic_guid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_shared_diagnostic_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.Diagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .catapult.tracing.tracing.proto.Breakdown breakdown = 1;
  if (_internal_has_breakdown()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::breakdown(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.DateRange date_range = 2;
  if (_internal_has_date_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::date_range(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.GenericSet generic_set = 3;
  if (_internal_has_generic_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::generic_set(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.RelatedEventSet related_event_set = 4;
  if (_internal_has_related_event_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::related_event_set(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.RelatedNameMap related_name_map = 5;
  if (_internal_has_related_name_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::related_name_map(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.Scalar scalar = 6;
  if (_internal_has_scalar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::scalar(this), target, stream);
  }

  // string shared_diagnostic_guid = 7;
  if (_internal_has_shared_diagnostic_guid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shared_diagnostic_guid().data(), static_cast<int>(this->_internal_shared_diagnostic_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "catapult.tracing.tracing.proto.Diagnostic.shared_diagnostic_guid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_shared_diagnostic_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.Diagnostic)
  return target;
}

size_t Diagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.Diagnostic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (diagnostic_oneof_case()) {
    // .catapult.tracing.tracing.proto.Breakdown breakdown = 1;
    case kBreakdown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.breakdown_);
      break;
    }
    // .catapult.tracing.tracing.proto.DateRange date_range = 2;
    case kDateRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.date_range_);
      break;
    }
    // .catapult.tracing.tracing.proto.GenericSet generic_set = 3;
    case kGenericSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.generic_set_);
      break;
    }
    // .catapult.tracing.tracing.proto.RelatedEventSet related_event_set = 4;
    case kRelatedEventSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.related_event_set_);
      break;
    }
    // .catapult.tracing.tracing.proto.RelatedNameMap related_name_map = 5;
    case kRelatedNameMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.related_name_map_);
      break;
    }
    // .catapult.tracing.tracing.proto.Scalar scalar = 6;
    case kScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostic_oneof_.scalar_);
      break;
    }
    // string shared_diagnostic_guid = 7;
    case kSharedDiagnosticGuid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shared_diagnostic_guid());
      break;
    }
    case DIAGNOSTIC_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostic::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Diagnostic*>(
      &from));
}

void Diagnostic::MergeFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.Diagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.diagnostic_oneof_case()) {
    case kBreakdown: {
      _internal_mutable_breakdown()->::catapult::tracing::tracing::proto::Breakdown::MergeFrom(from._internal_breakdown());
      break;
    }
    case kDateRange: {
      _internal_mutable_date_range()->::catapult::tracing::tracing::proto::DateRange::MergeFrom(from._internal_date_range());
      break;
    }
    case kGenericSet: {
      _internal_mutable_generic_set()->::catapult::tracing::tracing::proto::GenericSet::MergeFrom(from._internal_generic_set());
      break;
    }
    case kRelatedEventSet: {
      _internal_mutable_related_event_set()->::catapult::tracing::tracing::proto::RelatedEventSet::MergeFrom(from._internal_related_event_set());
      break;
    }
    case kRelatedNameMap: {
      _internal_mutable_related_name_map()->::catapult::tracing::tracing::proto::RelatedNameMap::MergeFrom(from._internal_related_name_map());
      break;
    }
    case kScalar: {
      _internal_mutable_scalar()->::catapult::tracing::tracing::proto::Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kSharedDiagnosticGuid: {
      _internal_set_shared_diagnostic_guid(from._internal_shared_diagnostic_guid());
      break;
    }
    case DIAGNOSTIC_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Diagnostic::CopyFrom(const Diagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.Diagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostic::IsInitialized() const {
  return true;
}

void Diagnostic::InternalSwap(Diagnostic* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(diagnostic_oneof_, other->diagnostic_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Diagnostic::GetTypeName() const {
  return "catapult.tracing.tracing.proto.Diagnostic";
}


// ===================================================================

DiagnosticMap_DiagnosticMapEntry_DoNotUse::DiagnosticMap_DiagnosticMapEntry_DoNotUse() {}
DiagnosticMap_DiagnosticMapEntry_DoNotUse::DiagnosticMap_DiagnosticMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DiagnosticMap_DiagnosticMapEntry_DoNotUse::MergeFrom(const DiagnosticMap_DiagnosticMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class DiagnosticMap::_Internal {
 public:
};

DiagnosticMap::DiagnosticMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  diagnostic_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.DiagnosticMap)
}
DiagnosticMap::DiagnosticMap(const DiagnosticMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  diagnostic_map_.MergeFrom(from.diagnostic_map_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.DiagnosticMap)
}

void DiagnosticMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticMap_histogram_2eproto.base);
}

DiagnosticMap::~DiagnosticMap() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.DiagnosticMap)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DiagnosticMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiagnosticMap::ArenaDtor(void* object) {
  DiagnosticMap* _this = reinterpret_cast< DiagnosticMap* >(object);
  (void)_this;
}
void DiagnosticMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagnosticMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticMap& DiagnosticMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticMap_histogram_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticMap::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.DiagnosticMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnostic_map_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DiagnosticMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .catapult.tracing.tracing.proto.Diagnostic> diagnostic_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&diagnostic_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.DiagnosticMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .catapult.tracing.tracing.proto.Diagnostic> diagnostic_map = 1;
  if (!this->_internal_diagnostic_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "catapult.tracing.tracing.proto.DiagnosticMap.DiagnosticMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_diagnostic_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_diagnostic_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
          it = this->_internal_diagnostic_map().begin();
          it != this->_internal_diagnostic_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DiagnosticMap_DiagnosticMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
          it = this->_internal_diagnostic_map().begin();
          it != this->_internal_diagnostic_map().end(); ++it) {
        target = DiagnosticMap_DiagnosticMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.DiagnosticMap)
  return target;
}

size_t DiagnosticMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.DiagnosticMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .catapult.tracing.tracing.proto.Diagnostic> diagnostic_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_diagnostic_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
      it = this->_internal_diagnostic_map().begin();
      it != this->_internal_diagnostic_map().end(); ++it) {
    total_size += DiagnosticMap_DiagnosticMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiagnosticMap*>(
      &from));
}

void DiagnosticMap::MergeFrom(const DiagnosticMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.DiagnosticMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diagnostic_map_.MergeFrom(from.diagnostic_map_);
}

void DiagnosticMap::CopyFrom(const DiagnosticMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.DiagnosticMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticMap::IsInitialized() const {
  return true;
}

void DiagnosticMap::InternalSwap(DiagnosticMap* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  diagnostic_map_.Swap(&other->diagnostic_map_);
}

std::string DiagnosticMap::GetTypeName() const {
  return "catapult.tracing.tracing.proto.DiagnosticMap";
}


// ===================================================================

class RunningStatistics::_Internal {
 public:
};

RunningStatistics::RunningStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.RunningStatistics)
}
RunningStatistics::RunningStatistics(const RunningStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&max_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.RunningStatistics)
}

void RunningStatistics::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&max_)) + sizeof(count_));
}

RunningStatistics::~RunningStatistics() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.RunningStatistics)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RunningStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunningStatistics::ArenaDtor(void* object) {
  RunningStatistics* _this = reinterpret_cast< RunningStatistics* >(object);
  (void)_this;
}
void RunningStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunningStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunningStatistics& RunningStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunningStatistics_histogram_2eproto.base);
  return *internal_default_instance();
}


void RunningStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.RunningStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&max_)) + sizeof(count_));
  _internal_metadata_.Clear<std::string>();
}

const char* RunningStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double meanlogs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          meanlogs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mean = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double variance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunningStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.RunningStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  // double meanlogs = 3;
  if (!(this->meanlogs() <= 0 && this->meanlogs() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_meanlogs(), target);
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_mean(), target);
  }

  // double min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min(), target);
  }

  // double sum = 6;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sum(), target);
  }

  // double variance = 7;
  if (!(this->variance() <= 0 && this->variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.RunningStatistics)
  return target;
}

size_t RunningStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.RunningStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 8;
  }

  // double meanlogs = 3;
  if (!(this->meanlogs() <= 0 && this->meanlogs() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum = 6;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // double variance = 7;
  if (!(this->variance() <= 0 && this->variance() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunningStatistics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RunningStatistics*>(
      &from));
}

void RunningStatistics::MergeFrom(const RunningStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.RunningStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from.meanlogs() <= 0 && from.meanlogs() >= 0)) {
    _internal_set_meanlogs(from._internal_meanlogs());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (!(from.variance() <= 0 && from.variance() >= 0)) {
    _internal_set_variance(from._internal_variance());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void RunningStatistics::CopyFrom(const RunningStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.RunningStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningStatistics::IsInitialized() const {
  return true;
}

void RunningStatistics::InternalSwap(RunningStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunningStatistics, count_)
      + sizeof(RunningStatistics::count_)
      - PROTOBUF_FIELD_OFFSET(RunningStatistics, max_)>(
          reinterpret_cast<char*>(&max_),
          reinterpret_cast<char*>(&other->max_));
}

std::string RunningStatistics::GetTypeName() const {
  return "catapult.tracing.tracing.proto.RunningStatistics";
}


// ===================================================================

class Bin::_Internal {
 public:
};

Bin::Bin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  diagnostic_maps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.Bin)
}
Bin::Bin(const Bin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      diagnostic_maps_(from.diagnostic_maps_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  bin_count_ = from.bin_count_;
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.Bin)
}

void Bin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Bin_histogram_2eproto.base);
  bin_count_ = 0;
}

Bin::~Bin() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.Bin)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Bin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Bin::ArenaDtor(void* object) {
  Bin* _this = reinterpret_cast< Bin* >(object);
  (void)_this;
}
void Bin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bin& Bin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Bin_histogram_2eproto.base);
  return *internal_default_instance();
}


void Bin::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.Bin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnostic_maps_.Clear();
  bin_count_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Bin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bin_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .catapult.tracing.tracing.proto.DiagnosticMap diagnostic_maps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnostic_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.Bin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bin_count = 1;
  if (this->bin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bin_count(), target);
  }

  // repeated .catapult.tracing.tracing.proto.DiagnosticMap diagnostic_maps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnostic_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_diagnostic_maps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.Bin)
  return target;
}

size_t Bin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.Bin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .catapult.tracing.tracing.proto.DiagnosticMap diagnostic_maps = 2;
  total_size += 1UL * this->_internal_diagnostic_maps_size();
  for (const auto& msg : this->diagnostic_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 bin_count = 1;
  if (this->bin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bin_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Bin*>(
      &from));
}

void Bin::MergeFrom(const Bin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.Bin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diagnostic_maps_.MergeFrom(from.diagnostic_maps_);
  if (from.bin_count() != 0) {
    _internal_set_bin_count(from._internal_bin_count());
  }
}

void Bin::CopyFrom(const Bin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.Bin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bin::IsInitialized() const {
  return true;
}

void Bin::InternalSwap(Bin* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  diagnostic_maps_.InternalSwap(&other->diagnostic_maps_);
  swap(bin_count_, other->bin_count_);
}

std::string Bin::GetTypeName() const {
  return "catapult.tracing.tracing.proto.Bin";
}


// ===================================================================

class SummaryOptions::_Internal {
 public:
};

SummaryOptions::SummaryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  percentile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.SummaryOptions)
}
SummaryOptions::SummaryOptions(const SummaryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      percentile_(from.percentile_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&avg_, &from.avg_,
    static_cast<size_t>(reinterpret_cast<char*>(&nans_) -
    reinterpret_cast<char*>(&avg_)) + sizeof(nans_));
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.SummaryOptions)
}

void SummaryOptions::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&avg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nans_) -
      reinterpret_cast<char*>(&avg_)) + sizeof(nans_));
}

SummaryOptions::~SummaryOptions() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.SummaryOptions)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SummaryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SummaryOptions::ArenaDtor(void* object) {
  SummaryOptions* _this = reinterpret_cast< SummaryOptions* >(object);
  (void)_this;
}
void SummaryOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryOptions& SummaryOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryOptions_histogram_2eproto.base);
  return *internal_default_instance();
}


void SummaryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.SummaryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  percentile_.Clear();
  ::memset(&avg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nans_) -
      reinterpret_cast<char*>(&avg_)) + sizeof(nans_));
  _internal_metadata_.Clear<std::string>();
}

const char* SummaryOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool avg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool geometric_mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          geometric_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool std = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          std_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_percentile(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_percentile(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.SummaryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool avg = 1;
  if (this->avg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_avg(), target);
  }

  // bool geometric_mean = 2;
  if (this->geometric_mean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_geometric_mean(), target);
  }

  // bool std = 3;
  if (this->std() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_std(), target);
  }

  // bool count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_count(), target);
  }

  // bool sum = 5;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sum(), target);
  }

  // bool min = 6;
  if (this->min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_min(), target);
  }

  // bool max = 7;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_max(), target);
  }

  // bool nans = 8;
  if (this->nans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_nans(), target);
  }

  // repeated float percentile = 9;
  if (this->_internal_percentile_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.SummaryOptions)
  return target;
}

size_t SummaryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.SummaryOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float percentile = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_percentile_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _percentile_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool avg = 1;
  if (this->avg() != 0) {
    total_size += 1 + 1;
  }

  // bool geometric_mean = 2;
  if (this->geometric_mean() != 0) {
    total_size += 1 + 1;
  }

  // bool std = 3;
  if (this->std() != 0) {
    total_size += 1 + 1;
  }

  // bool count = 4;
  if (this->count() != 0) {
    total_size += 1 + 1;
  }

  // bool sum = 5;
  if (this->sum() != 0) {
    total_size += 1 + 1;
  }

  // bool min = 6;
  if (this->min() != 0) {
    total_size += 1 + 1;
  }

  // bool max = 7;
  if (this->max() != 0) {
    total_size += 1 + 1;
  }

  // bool nans = 8;
  if (this->nans() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SummaryOptions*>(
      &from));
}

void SummaryOptions::MergeFrom(const SummaryOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.SummaryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  percentile_.MergeFrom(from.percentile_);
  if (from.avg() != 0) {
    _internal_set_avg(from._internal_avg());
  }
  if (from.geometric_mean() != 0) {
    _internal_set_geometric_mean(from._internal_geometric_mean());
  }
  if (from.std() != 0) {
    _internal_set_std(from._internal_std());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.nans() != 0) {
    _internal_set_nans(from._internal_nans());
  }
}

void SummaryOptions::CopyFrom(const SummaryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.SummaryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryOptions::IsInitialized() const {
  return true;
}

void SummaryOptions::InternalSwap(SummaryOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  percentile_.InternalSwap(&other->percentile_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryOptions, nans_)
      + sizeof(SummaryOptions::nans_)
      - PROTOBUF_FIELD_OFFSET(SummaryOptions, avg_)>(
          reinterpret_cast<char*>(&avg_),
          reinterpret_cast<char*>(&other->avg_));
}

std::string SummaryOptions::GetTypeName() const {
  return "catapult.tracing.tracing.proto.SummaryOptions";
}


// ===================================================================

Histogram_AllBinsEntry_DoNotUse::Histogram_AllBinsEntry_DoNotUse() {}
Histogram_AllBinsEntry_DoNotUse::Histogram_AllBinsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Histogram_AllBinsEntry_DoNotUse::MergeFrom(const Histogram_AllBinsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class Histogram::_Internal {
 public:
  static const ::catapult::tracing::tracing::proto::UnitAndDirection& unit(const Histogram* msg);
  static const ::catapult::tracing::tracing::proto::BinBoundaries& bin_boundaries(const Histogram* msg);
  static const ::catapult::tracing::tracing::proto::DiagnosticMap& diagnostics(const Histogram* msg);
  static const ::catapult::tracing::tracing::proto::RunningStatistics& running(const Histogram* msg);
  static const ::catapult::tracing::tracing::proto::SummaryOptions& summary_options(const Histogram* msg);
};

const ::catapult::tracing::tracing::proto::UnitAndDirection&
Histogram::_Internal::unit(const Histogram* msg) {
  return *msg->unit_;
}
const ::catapult::tracing::tracing::proto::BinBoundaries&
Histogram::_Internal::bin_boundaries(const Histogram* msg) {
  return *msg->bin_boundaries_;
}
const ::catapult::tracing::tracing::proto::DiagnosticMap&
Histogram::_Internal::diagnostics(const Histogram* msg) {
  return *msg->diagnostics_;
}
const ::catapult::tracing::tracing::proto::RunningStatistics&
Histogram::_Internal::running(const Histogram* msg) {
  return *msg->running_;
}
const ::catapult::tracing::tracing::proto::SummaryOptions&
Histogram::_Internal::summary_options(const Histogram* msg) {
  return *msg->summary_options_;
}
Histogram::Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  sample_values_(arena),
  nan_diagnostics_(arena),
  all_bins_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      sample_values_(from.sample_values_),
      nan_diagnostics_(from.nan_diagnostics_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  all_bins_.MergeFrom(from.all_bins_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_unit()) {
    unit_ = new ::catapult::tracing::tracing::proto::UnitAndDirection(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  if (from._internal_has_bin_boundaries()) {
    bin_boundaries_ = new ::catapult::tracing::tracing::proto::BinBoundaries(*from.bin_boundaries_);
  } else {
    bin_boundaries_ = nullptr;
  }
  if (from._internal_has_diagnostics()) {
    diagnostics_ = new ::catapult::tracing::tracing::proto::DiagnosticMap(*from.diagnostics_);
  } else {
    diagnostics_ = nullptr;
  }
  if (from._internal_has_running()) {
    running_ = new ::catapult::tracing::tracing::proto::RunningStatistics(*from.running_);
  } else {
    running_ = nullptr;
  }
  if (from._internal_has_summary_options()) {
    summary_options_ = new ::catapult::tracing::tracing::proto::SummaryOptions(*from.summary_options_);
  } else {
    summary_options_ = nullptr;
  }
  ::memcpy(&max_num_sample_values_, &from.max_num_sample_values_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_nans_) -
    reinterpret_cast<char*>(&max_num_sample_values_)) + sizeof(num_nans_));
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.Histogram)
}

void Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Histogram_histogram_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_nans_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(num_nans_));
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.Histogram)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unit_;
  if (this != internal_default_instance()) delete bin_boundaries_;
  if (this != internal_default_instance()) delete diagnostics_;
  if (this != internal_default_instance()) delete running_;
  if (this != internal_default_instance()) delete summary_options_;
}

void Histogram::ArenaDtor(void* object) {
  Histogram* _this = reinterpret_cast< Histogram* >(object);
  (void)_this;
}
void Histogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Histogram& Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Histogram_histogram_2eproto.base);
  return *internal_default_instance();
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_values_.Clear();
  nan_diagnostics_.Clear();
  all_bins_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && unit_ != nullptr) {
    delete unit_;
  }
  unit_ = nullptr;
  if (GetArena() == nullptr && bin_boundaries_ != nullptr) {
    delete bin_boundaries_;
  }
  bin_boundaries_ = nullptr;
  if (GetArena() == nullptr && diagnostics_ != nullptr) {
    delete diagnostics_;
  }
  diagnostics_ = nullptr;
  if (GetArena() == nullptr && running_ != nullptr) {
    delete running_;
  }
  running_ = nullptr;
  if (GetArena() == nullptr && summary_options_ != nullptr) {
    delete summary_options_;
  }
  summary_options_ = nullptr;
  ::memset(&max_num_sample_values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_nans_) -
      reinterpret_cast<char*>(&max_num_sample_values_)) + sizeof(num_nans_));
  _internal_metadata_.Clear<std::string>();
}

const char* Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.UnitAndDirection unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.BinBoundaries bin_boundaries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bin_boundaries(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.DiagnosticMap diagnostics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double sample_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sample_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_sample_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 max_num_sample_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_num_sample_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_nans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_nans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .catapult.tracing.tracing.proto.DiagnosticMap nan_diagnostics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nan_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.RunningStatistics running = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_running(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .catapult.tracing.tracing.proto.Bin> all_bins = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&all_bins_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .catapult.tracing.tracing.proto.SummaryOptions summary_options = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Histogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "catapult.tracing.tracing.proto.Histogram.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .catapult.tracing.tracing.proto.UnitAndDirection unit = 2;
  if (this->has_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unit(this), target, stream);
  }

  // .catapult.tracing.tracing.proto.BinBoundaries bin_boundaries = 3;
  if (this->has_bin_boundaries()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bin_boundaries(this), target, stream);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "catapult.tracing.tracing.proto.Histogram.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .catapult.tracing.tracing.proto.DiagnosticMap diagnostics = 5;
  if (this->has_diagnostics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::diagnostics(this), target, stream);
  }

  // repeated double sample_values = 6;
  if (this->_internal_sample_values_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_sample_values(), target);
  }

  // int32 max_num_sample_values = 7;
  if (this->max_num_sample_values() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_num_sample_values(), target);
  }

  // int32 num_nans = 8;
  if (this->num_nans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_nans(), target);
  }

  // repeated .catapult.tracing.tracing.proto.DiagnosticMap nan_diagnostics = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nan_diagnostics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_nan_diagnostics(i), target, stream);
  }

  // .catapult.tracing.tracing.proto.RunningStatistics running = 10;
  if (this->has_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::running(this), target, stream);
  }

  // map<int32, .catapult.tracing.tracing.proto.Bin> all_bins = 11;
  if (!this->_internal_all_bins().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::catapult::tracing::tracing::proto::Bin >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_all_bins().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_all_bins().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::catapult::tracing::tracing::proto::Bin >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::catapult::tracing::tracing::proto::Bin >::const_iterator
          it = this->_internal_all_bins().begin();
          it != this->_internal_all_bins().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Histogram_AllBinsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::catapult::tracing::tracing::proto::Bin >::const_iterator
          it = this->_internal_all_bins().begin();
          it != this->_internal_all_bins().end(); ++it) {
        target = Histogram_AllBinsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // .catapult.tracing.tracing.proto.SummaryOptions summary_options = 12;
  if (this->has_summary_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::summary_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sample_values = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sample_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sample_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .catapult.tracing.tracing.proto.DiagnosticMap nan_diagnostics = 9;
  total_size += 1UL * this->_internal_nan_diagnostics_size();
  for (const auto& msg : this->nan_diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .catapult.tracing.tracing.proto.Bin> all_bins = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_all_bins_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::catapult::tracing::tracing::proto::Bin >::const_iterator
      it = this->_internal_all_bins().begin();
      it != this->_internal_all_bins().end(); ++it) {
    total_size += Histogram_AllBinsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .catapult.tracing.tracing.proto.UnitAndDirection unit = 2;
  if (this->has_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  // .catapult.tracing.tracing.proto.BinBoundaries bin_boundaries = 3;
  if (this->has_bin_boundaries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bin_boundaries_);
  }

  // .catapult.tracing.tracing.proto.DiagnosticMap diagnostics = 5;
  if (this->has_diagnostics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnostics_);
  }

  // .catapult.tracing.tracing.proto.RunningStatistics running = 10;
  if (this->has_running()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *running_);
  }

  // .catapult.tracing.tracing.proto.SummaryOptions summary_options = 12;
  if (this->has_summary_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_options_);
  }

  // int32 max_num_sample_values = 7;
  if (this->max_num_sample_values() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_num_sample_values());
  }

  // int32 num_nans = 8;
  if (this->num_nans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_nans());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Histogram*>(
      &from));
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_values_.MergeFrom(from.sample_values_);
  nan_diagnostics_.MergeFrom(from.nan_diagnostics_);
  all_bins_.MergeFrom(from.all_bins_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_unit()) {
    _internal_mutable_unit()->::catapult::tracing::tracing::proto::UnitAndDirection::MergeFrom(from._internal_unit());
  }
  if (from.has_bin_boundaries()) {
    _internal_mutable_bin_boundaries()->::catapult::tracing::tracing::proto::BinBoundaries::MergeFrom(from._internal_bin_boundaries());
  }
  if (from.has_diagnostics()) {
    _internal_mutable_diagnostics()->::catapult::tracing::tracing::proto::DiagnosticMap::MergeFrom(from._internal_diagnostics());
  }
  if (from.has_running()) {
    _internal_mutable_running()->::catapult::tracing::tracing::proto::RunningStatistics::MergeFrom(from._internal_running());
  }
  if (from.has_summary_options()) {
    _internal_mutable_summary_options()->::catapult::tracing::tracing::proto::SummaryOptions::MergeFrom(from._internal_summary_options());
  }
  if (from.max_num_sample_values() != 0) {
    _internal_set_max_num_sample_values(from._internal_max_num_sample_values());
  }
  if (from.num_nans() != 0) {
    _internal_set_num_nans(from._internal_num_nans());
  }
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  sample_values_.InternalSwap(&other->sample_values_);
  nan_diagnostics_.InternalSwap(&other->nan_diagnostics_);
  all_bins_.Swap(&other->all_bins_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Histogram, num_nans_)
      + sizeof(Histogram::num_nans_)
      - PROTOBUF_FIELD_OFFSET(Histogram, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

std::string Histogram::GetTypeName() const {
  return "catapult.tracing.tracing.proto.Histogram";
}


// ===================================================================

HistogramSet_SharedDiagnosticsEntry_DoNotUse::HistogramSet_SharedDiagnosticsEntry_DoNotUse() {}
HistogramSet_SharedDiagnosticsEntry_DoNotUse::HistogramSet_SharedDiagnosticsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HistogramSet_SharedDiagnosticsEntry_DoNotUse::MergeFrom(const HistogramSet_SharedDiagnosticsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class HistogramSet::_Internal {
 public:
};

HistogramSet::HistogramSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  histograms_(arena),
  shared_diagnostics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:catapult.tracing.tracing.proto.HistogramSet)
}
HistogramSet::HistogramSet(const HistogramSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      histograms_(from.histograms_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  shared_diagnostics_.MergeFrom(from.shared_diagnostics_);
  // @@protoc_insertion_point(copy_constructor:catapult.tracing.tracing.proto.HistogramSet)
}

void HistogramSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistogramSet_histogram_2eproto.base);
}

HistogramSet::~HistogramSet() {
  // @@protoc_insertion_point(destructor:catapult.tracing.tracing.proto.HistogramSet)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void HistogramSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistogramSet::ArenaDtor(void* object) {
  HistogramSet* _this = reinterpret_cast< HistogramSet* >(object);
  (void)_this;
}
void HistogramSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramSet& HistogramSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistogramSet_histogram_2eproto.base);
  return *internal_default_instance();
}


void HistogramSet::Clear() {
// @@protoc_insertion_point(message_clear_start:catapult.tracing.tracing.proto.HistogramSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histograms_.Clear();
  shared_diagnostics_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HistogramSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .catapult.tracing.tracing.proto.Histogram histograms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histograms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .catapult.tracing.tracing.proto.Diagnostic> shared_diagnostics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&shared_diagnostics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:catapult.tracing.tracing.proto.HistogramSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .catapult.tracing.tracing.proto.Histogram histograms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_histograms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_histograms(i), target, stream);
  }

  // map<string, .catapult.tracing.tracing.proto.Diagnostic> shared_diagnostics = 2;
  if (!this->_internal_shared_diagnostics().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "catapult.tracing.tracing.proto.HistogramSet.SharedDiagnosticsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_shared_diagnostics().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_shared_diagnostics().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
          it = this->_internal_shared_diagnostics().begin();
          it != this->_internal_shared_diagnostics().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HistogramSet_SharedDiagnosticsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
          it = this->_internal_shared_diagnostics().begin();
          it != this->_internal_shared_diagnostics().end(); ++it) {
        target = HistogramSet_SharedDiagnosticsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:catapult.tracing.tracing.proto.HistogramSet)
  return target;
}

size_t HistogramSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:catapult.tracing.tracing.proto.HistogramSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .catapult.tracing.tracing.proto.Histogram histograms = 1;
  total_size += 1UL * this->_internal_histograms_size();
  for (const auto& msg : this->histograms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .catapult.tracing.tracing.proto.Diagnostic> shared_diagnostics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shared_diagnostics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::catapult::tracing::tracing::proto::Diagnostic >::const_iterator
      it = this->_internal_shared_diagnostics().begin();
      it != this->_internal_shared_diagnostics().end(); ++it) {
    total_size += HistogramSet_SharedDiagnosticsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HistogramSet*>(
      &from));
}

void HistogramSet::MergeFrom(const HistogramSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:catapult.tracing.tracing.proto.HistogramSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histograms_.MergeFrom(from.histograms_);
  shared_diagnostics_.MergeFrom(from.shared_diagnostics_);
}

void HistogramSet::CopyFrom(const HistogramSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:catapult.tracing.tracing.proto.HistogramSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramSet::IsInitialized() const {
  return true;
}

void HistogramSet::InternalSwap(HistogramSet* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  histograms_.InternalSwap(&other->histograms_);
  shared_diagnostics_.Swap(&other->shared_diagnostics_);
}

std::string HistogramSet::GetTypeName() const {
  return "catapult.tracing.tracing.proto.HistogramSet";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tracing
}  // namespace tracing
}  // namespace catapult
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::UnitAndDirection* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::UnitAndDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::UnitAndDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::BinBoundaryDetailedSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::BinBoundarySpec* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::BinBoundarySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::BinBoundarySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::BinBoundaries* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::BinBoundaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::BinBoundaries >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Breakdown* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Breakdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Breakdown >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::DateRange* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::DateRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::DateRange >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::GenericSet* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::GenericSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::GenericSet >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::RelatedEventSet* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::RelatedEventSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::RelatedEventSet >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::RelatedNameMap* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::RelatedNameMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::RelatedNameMap >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Scalar* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Diagnostic* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Diagnostic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Diagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::DiagnosticMap_DiagnosticMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::DiagnosticMap_DiagnosticMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::DiagnosticMap_DiagnosticMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::DiagnosticMap* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::DiagnosticMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::DiagnosticMap >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::RunningStatistics* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::RunningStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::RunningStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Bin* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Bin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Bin >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::SummaryOptions* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::SummaryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::SummaryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Histogram_AllBinsEntry_DoNotUse* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Histogram_AllBinsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Histogram_AllBinsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::Histogram* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::HistogramSet_SharedDiagnosticsEntry_DoNotUse* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::HistogramSet_SharedDiagnosticsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::HistogramSet_SharedDiagnosticsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::catapult::tracing::tracing::proto::HistogramSet* Arena::CreateMaybeMessage< ::catapult::tracing::tracing::proto::HistogramSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::catapult::tracing::tracing::proto::HistogramSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
