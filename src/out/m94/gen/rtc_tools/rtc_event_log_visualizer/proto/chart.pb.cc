// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

#include "chart.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Chart_chart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSet_chart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickLabel_chart_2eproto;
namespace webrtc {
namespace analytics {
class DataSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSet> _instance;
} _DataSet_default_instance_;
class TickLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TickLabel> _instance;
} _TickLabel_default_instance_;
class ChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chart> _instance;
} _Chart_default_instance_;
class ChartCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChartCollection> _instance;
} _ChartCollection_default_instance_;
}  // namespace analytics
}  // namespace webrtc
static void InitDefaultsscc_info_Chart_chart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_Chart_default_instance_;
    new (ptr) ::webrtc::analytics::Chart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Chart_chart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Chart_chart_2eproto}, {
      &scc_info_DataSet_chart_2eproto.base,
      &scc_info_TickLabel_chart_2eproto.base,}};

static void InitDefaultsscc_info_ChartCollection_chart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_ChartCollection_default_instance_;
    new (ptr) ::webrtc::analytics::ChartCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChartCollection_chart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChartCollection_chart_2eproto}, {
      &scc_info_Chart_chart_2eproto.base,}};

static void InitDefaultsscc_info_DataSet_chart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_DataSet_default_instance_;
    new (ptr) ::webrtc::analytics::DataSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataSet_chart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataSet_chart_2eproto}, {}};

static void InitDefaultsscc_info_TickLabel_chart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::analytics::_TickLabel_default_instance_;
    new (ptr) ::webrtc::analytics::TickLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TickLabel_chart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TickLabel_chart_2eproto}, {}};

namespace webrtc {
namespace analytics {

// ===================================================================

class DataSet::_Internal {
 public:
};

DataSet::DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  x_values_(arena),
  y_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.analytics.DataSet)
}
DataSet::DataSet(const DataSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      x_values_(from.x_values_),
      y_values_(from.y_values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlight_points_) -
    reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.DataSet)
}

void DataSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSet_chart_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.DataSet)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DataSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataSet::ArenaDtor(void* object) {
  DataSet* _this = reinterpret_cast< DataSet* >(object);
  (void)_this;
}
void DataSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSet& DataSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSet_chart_2eproto.base);
  return *internal_default_instance();
}


void DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.DataSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_values_.Clear();
  y_values_.Clear();
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highlight_points_) -
      reinterpret_cast<char*>(&style_)) + sizeof(highlight_points_));
  _internal_metadata_.Clear<std::string>();
}

const char* DataSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float x_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_x_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_x_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float y_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_y_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_y_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.analytics.ChartStyle.Type style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_style(static_cast<::webrtc::analytics::ChartStyle_Type>(val));
        } else goto handle_unusual;
        continue;
      // bool highlight_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          highlight_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.analytics.DataSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x_values = 1;
  if (this->_internal_x_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_x_values(), target);
  }

  // repeated float y_values = 2;
  if (this->_internal_y_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_y_values(), target);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.DataSet.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_style(), target);
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_highlight_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.analytics.DataSet)
  return target;
}

size_t DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.DataSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float x_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _x_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float y_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _y_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .webrtc.analytics.ChartStyle.Type style = 4;
  if (this->style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style());
  }

  // bool highlight_points = 5;
  if (this->highlight_points() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DataSet*>(
      &from));
}

void DataSet::MergeFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_values_.MergeFrom(from.x_values_);
  y_values_.MergeFrom(from.y_values_);
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.style() != 0) {
    _internal_set_style(from._internal_style());
  }
  if (from.highlight_points() != 0) {
    _internal_set_highlight_points(from._internal_highlight_points());
  }
}

void DataSet::CopyFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {
  return true;
}

void DataSet::InternalSwap(DataSet* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  x_values_.InternalSwap(&other->x_values_);
  y_values_.InternalSwap(&other->y_values_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSet, highlight_points_)
      + sizeof(DataSet::highlight_points_)
      - PROTOBUF_FIELD_OFFSET(DataSet, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

std::string DataSet::GetTypeName() const {
  return "webrtc.analytics.DataSet";
}


// ===================================================================

class TickLabel::_Internal {
 public:
};

TickLabel::TickLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.analytics.TickLabel)
}
TickLabel::TickLabel(const TickLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.TickLabel)
}

void TickLabel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TickLabel_chart_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

TickLabel::~TickLabel() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.TickLabel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TickLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TickLabel::ArenaDtor(void* object) {
  TickLabel* _this = reinterpret_cast< TickLabel* >(object);
  (void)_this;
}
void TickLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TickLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TickLabel& TickLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TickLabel_chart_2eproto.base);
  return *internal_default_instance();
}


void TickLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.TickLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* TickLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TickLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.analytics.TickLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.TickLabel.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.analytics.TickLabel)
  return target;
}

size_t TickLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.TickLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickLabel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TickLabel*>(
      &from));
}

void TickLabel::MergeFrom(const TickLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.TickLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void TickLabel::CopyFrom(const TickLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.TickLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickLabel::IsInitialized() const {
  return true;
}

void TickLabel::InternalSwap(TickLabel* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

std::string TickLabel::GetTypeName() const {
  return "webrtc.analytics.TickLabel";
}


// ===================================================================

class Chart::_Internal {
 public:
};

Chart::Chart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  data_sets_(arena),
  yaxis_tick_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.analytics.Chart)
}
Chart::Chart(const Chart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      data_sets_(from.data_sets_),
      yaxis_tick_labels_(from.yaxis_tick_labels_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  xaxis_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xaxis_label().empty()) {
    xaxis_label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xaxis_label(),
      GetArena());
  }
  yaxis_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_yaxis_label().empty()) {
    yaxis_label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_yaxis_label(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&xaxis_min_, &from.xaxis_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaxis_max_) -
    reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.Chart)
}

void Chart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chart_chart_2eproto.base);
  xaxis_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&xaxis_min_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.Chart)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Chart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  xaxis_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chart::ArenaDtor(void* object) {
  Chart* _this = reinterpret_cast< Chart* >(object);
  (void)_this;
}
void Chart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chart& Chart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chart_chart_2eproto.base);
  return *internal_default_instance();
}


void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.Chart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_sets_.Clear();
  yaxis_tick_labels_.Clear();
  xaxis_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  yaxis_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&xaxis_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaxis_max_) -
      reinterpret_cast<char*>(&xaxis_min_)) + sizeof(yaxis_max_));
  _internal_metadata_.Clear<std::string>();
}

const char* Chart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .webrtc.analytics.DataSet data_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float xaxis_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          xaxis_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xaxis_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          xaxis_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string xaxis_label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_xaxis_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaxis_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaxis_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaxis_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          yaxis_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string yaxis_label = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_yaxis_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yaxis_tick_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.analytics.Chart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_sets(i), target, stream);
  }

  // float xaxis_min = 2;
  if (!(this->xaxis_min() <= 0 && this->xaxis_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_xaxis_min(), target);
  }

  // float xaxis_max = 3;
  if (!(this->xaxis_max() <= 0 && this->xaxis_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xaxis_max(), target);
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xaxis_label().data(), static_cast<int>(this->_internal_xaxis_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.xaxis_label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_xaxis_label(), target);
  }

  // float yaxis_min = 5;
  if (!(this->yaxis_min() <= 0 && this->yaxis_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaxis_min(), target);
  }

  // float yaxis_max = 6;
  if (!(this->yaxis_max() <= 0 && this->yaxis_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_yaxis_max(), target);
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_yaxis_label().data(), static_cast<int>(this->_internal_yaxis_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.yaxis_label");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_yaxis_label(), target);
  }

  // string title = 8;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title(), target);
  }

  // string id = 9;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "webrtc.analytics.Chart.id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_id(), target);
  }

  // repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yaxis_tick_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_yaxis_tick_labels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.analytics.Chart)
  return target;
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.Chart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  total_size += 1UL * this->_internal_data_sets_size();
  for (const auto& msg : this->data_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .webrtc.analytics.TickLabel yaxis_tick_labels = 10;
  total_size += 1UL * this->_internal_yaxis_tick_labels_size();
  for (const auto& msg : this->yaxis_tick_labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string xaxis_label = 4;
  if (this->xaxis_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xaxis_label());
  }

  // string yaxis_label = 7;
  if (this->yaxis_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_yaxis_label());
  }

  // string title = 8;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string id = 9;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // float xaxis_min = 2;
  if (!(this->xaxis_min() <= 0 && this->xaxis_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float xaxis_max = 3;
  if (!(this->xaxis_max() <= 0 && this->xaxis_max() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaxis_min = 5;
  if (!(this->yaxis_min() <= 0 && this->yaxis_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaxis_max = 6;
  if (!(this->yaxis_max() <= 0 && this->yaxis_max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Chart*>(
      &from));
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_sets_.MergeFrom(from.data_sets_);
  yaxis_tick_labels_.MergeFrom(from.yaxis_tick_labels_);
  if (from.xaxis_label().size() > 0) {
    _internal_set_xaxis_label(from._internal_xaxis_label());
  }
  if (from.yaxis_label().size() > 0) {
    _internal_set_yaxis_label(from._internal_yaxis_label());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.xaxis_min() <= 0 && from.xaxis_min() >= 0)) {
    _internal_set_xaxis_min(from._internal_xaxis_min());
  }
  if (!(from.xaxis_max() <= 0 && from.xaxis_max() >= 0)) {
    _internal_set_xaxis_max(from._internal_xaxis_max());
  }
  if (!(from.yaxis_min() <= 0 && from.yaxis_min() >= 0)) {
    _internal_set_yaxis_min(from._internal_yaxis_min());
  }
  if (!(from.yaxis_max() <= 0 && from.yaxis_max() >= 0)) {
    _internal_set_yaxis_max(from._internal_yaxis_max());
  }
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::InternalSwap(Chart* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  data_sets_.InternalSwap(&other->data_sets_);
  yaxis_tick_labels_.InternalSwap(&other->yaxis_tick_labels_);
  xaxis_label_.Swap(&other->xaxis_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  yaxis_label_.Swap(&other->yaxis_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart, yaxis_max_)
      + sizeof(Chart::yaxis_max_)
      - PROTOBUF_FIELD_OFFSET(Chart, xaxis_min_)>(
          reinterpret_cast<char*>(&xaxis_min_),
          reinterpret_cast<char*>(&other->xaxis_min_));
}

std::string Chart::GetTypeName() const {
  return "webrtc.analytics.Chart";
}


// ===================================================================

class ChartCollection::_Internal {
 public:
};

ChartCollection::ChartCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  charts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.analytics.ChartCollection)
}
ChartCollection::ChartCollection(const ChartCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      charts_(from.charts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:webrtc.analytics.ChartCollection)
}

void ChartCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChartCollection_chart_2eproto.base);
}

ChartCollection::~ChartCollection() {
  // @@protoc_insertion_point(destructor:webrtc.analytics.ChartCollection)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChartCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChartCollection::ArenaDtor(void* object) {
  ChartCollection* _this = reinterpret_cast< ChartCollection* >(object);
  (void)_this;
}
void ChartCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChartCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChartCollection& ChartCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChartCollection_chart_2eproto.base);
  return *internal_default_instance();
}


void ChartCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.analytics.ChartCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charts_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChartCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .webrtc.analytics.Chart charts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChartCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.analytics.ChartCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.analytics.Chart charts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_charts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_charts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.analytics.ChartCollection)
  return target;
}

size_t ChartCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.analytics.ChartCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.analytics.Chart charts = 1;
  total_size += 1UL * this->_internal_charts_size();
  for (const auto& msg : this->charts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartCollection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChartCollection*>(
      &from));
}

void ChartCollection::MergeFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.analytics.ChartCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charts_.MergeFrom(from.charts_);
}

void ChartCollection::CopyFrom(const ChartCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.analytics.ChartCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCollection::IsInitialized() const {
  return true;
}

void ChartCollection::InternalSwap(ChartCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  charts_.InternalSwap(&other->charts_);
}

std::string ChartCollection::GetTypeName() const {
  return "webrtc.analytics.ChartCollection";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace analytics
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webrtc::analytics::DataSet* Arena::CreateMaybeMessage< ::webrtc::analytics::DataSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::analytics::DataSet >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::analytics::TickLabel* Arena::CreateMaybeMessage< ::webrtc::analytics::TickLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::analytics::TickLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::analytics::Chart* Arena::CreateMaybeMessage< ::webrtc::analytics::Chart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::analytics::Chart >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::analytics::ChartCollection* Arena::CreateMaybeMessage< ::webrtc::analytics::ChartCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::analytics::ChartCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
