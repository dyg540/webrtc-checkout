// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitrateController_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelController_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Controller_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Controller_ScoringPoint_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtxController_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FecController_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FecController_Threshold_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FecControllerRplrBased_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FecControllerRplrBased_Threshold_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameLengthController_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameLengthControllerV2_config_2eproto;
namespace webrtc {
namespace audio_network_adaptor {
namespace config {
class FecController_ThresholdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FecController_Threshold> _instance;
} _FecController_Threshold_default_instance_;
class FecControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FecController> _instance;
} _FecController_default_instance_;
class FecControllerRplrBased_ThresholdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FecControllerRplrBased_Threshold> _instance;
} _FecControllerRplrBased_Threshold_default_instance_;
class FecControllerRplrBasedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FecControllerRplrBased> _instance;
} _FecControllerRplrBased_default_instance_;
class FrameLengthControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameLengthController> _instance;
} _FrameLengthController_default_instance_;
class FrameLengthControllerV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameLengthControllerV2> _instance;
} _FrameLengthControllerV2_default_instance_;
class ChannelControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelController> _instance;
} _ChannelController_default_instance_;
class DtxControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DtxController> _instance;
} _DtxController_default_instance_;
class BitrateControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitrateController> _instance;
} _BitrateController_default_instance_;
class Controller_ScoringPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Controller_ScoringPoint> _instance;
} _Controller_ScoringPoint_default_instance_;
class ControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Controller> _instance;
} _Controller_default_instance_;
class ControllerManagerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerManager> _instance;
} _ControllerManager_default_instance_;
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
static void InitDefaultsscc_info_BitrateController_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_BitrateController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::BitrateController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitrateController_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BitrateController_config_2eproto}, {}};

static void InitDefaultsscc_info_ChannelController_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_ChannelController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::ChannelController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelController_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelController_config_2eproto}, {}};

static void InitDefaultsscc_info_Controller_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_Controller_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::Controller();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Controller_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Controller_config_2eproto}, {
      &scc_info_Controller_ScoringPoint_config_2eproto.base,
      &scc_info_FecController_config_2eproto.base,
      &scc_info_FrameLengthController_config_2eproto.base,
      &scc_info_ChannelController_config_2eproto.base,
      &scc_info_DtxController_config_2eproto.base,
      &scc_info_BitrateController_config_2eproto.base,
      &scc_info_FecControllerRplrBased_config_2eproto.base,
      &scc_info_FrameLengthControllerV2_config_2eproto.base,}};

static void InitDefaultsscc_info_Controller_ScoringPoint_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_Controller_ScoringPoint_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Controller_ScoringPoint_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Controller_ScoringPoint_config_2eproto}, {}};

static void InitDefaultsscc_info_ControllerManager_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_ControllerManager_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::ControllerManager();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControllerManager_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControllerManager_config_2eproto}, {
      &scc_info_Controller_config_2eproto.base,}};

static void InitDefaultsscc_info_DtxController_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_DtxController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::DtxController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DtxController_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DtxController_config_2eproto}, {}};

static void InitDefaultsscc_info_FecController_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FecController_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FecController_config_2eproto}, {
      &scc_info_FecController_Threshold_config_2eproto.base,}};

static void InitDefaultsscc_info_FecController_Threshold_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecController_Threshold_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecController_Threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FecController_Threshold_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FecController_Threshold_config_2eproto}, {}};

static void InitDefaultsscc_info_FecControllerRplrBased_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecControllerRplrBased();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FecControllerRplrBased_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FecControllerRplrBased_config_2eproto}, {
      &scc_info_FecControllerRplrBased_Threshold_config_2eproto.base,}};

static void InitDefaultsscc_info_FecControllerRplrBased_Threshold_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_Threshold_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FecControllerRplrBased_Threshold_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FecControllerRplrBased_Threshold_config_2eproto}, {}};

static void InitDefaultsscc_info_FrameLengthController_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FrameLengthController_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FrameLengthController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameLengthController_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameLengthController_config_2eproto}, {}};

static void InitDefaultsscc_info_FrameLengthControllerV2_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::audio_network_adaptor::config::_FrameLengthControllerV2_default_instance_;
    new (ptr) ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameLengthControllerV2_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameLengthControllerV2_config_2eproto}, {}};

namespace webrtc {
namespace audio_network_adaptor {
namespace config {

// ===================================================================

class FecController_Threshold::_Internal {
 public:
  using HasBits = decltype(std::declval<FecController_Threshold>()._has_bits_);
  static void set_has_low_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_bandwidth_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_bandwidth_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FecController_Threshold::FecController_Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
}
FecController_Threshold::FecController_Threshold(const FecController_Threshold& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&low_bandwidth_bps_, &from.low_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
    reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
}

void FecController_Threshold::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&low_bandwidth_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
      reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
}

FecController_Threshold::~FecController_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController.Threshold)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FecController_Threshold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FecController_Threshold::ArenaDtor(void* object) {
  FecController_Threshold* _this = reinterpret_cast< FecController_Threshold* >(object);
  (void)_this;
}
void FecController_Threshold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FecController_Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecController_Threshold& FecController_Threshold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FecController_Threshold_config_2eproto.base);
  return *internal_default_instance();
}


void FecController_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_bandwidth_packet_loss_) -
        reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_packet_loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecController_Threshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 low_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_low_bandwidth_bps(&has_bits);
          low_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float low_bandwidth_packet_loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_low_bandwidth_packet_loss(&has_bits);
          low_bandwidth_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 high_bandwidth_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_high_bandwidth_bps(&has_bits);
          high_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float high_bandwidth_packet_loss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_high_bandwidth_packet_loss(&has_bits);
          high_bandwidth_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FecController_Threshold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_low_bandwidth_bps(), target);
  }

  // optional float low_bandwidth_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_low_bandwidth_packet_loss(), target);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_high_bandwidth_bps(), target);
  }

  // optional float high_bandwidth_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_high_bandwidth_packet_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecController.Threshold)
  return target;
}

size_t FecController_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 low_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_low_bandwidth_bps());
    }

    // optional float low_bandwidth_packet_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_bandwidth_bps());
    }

    // optional float high_bandwidth_packet_loss = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecController_Threshold::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FecController_Threshold*>(
      &from));
}

void FecController_Threshold::MergeFrom(const FecController_Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      low_bandwidth_bps_ = from.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_bandwidth_packet_loss_ = from.low_bandwidth_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_bandwidth_bps_ = from.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_bandwidth_packet_loss_ = from.high_bandwidth_packet_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecController_Threshold::CopyFrom(const FecController_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecController_Threshold::IsInitialized() const {
  return true;
}

void FecController_Threshold::InternalSwap(FecController_Threshold* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecController_Threshold, high_bandwidth_packet_loss_)
      + sizeof(FecController_Threshold::high_bandwidth_packet_loss_)
      - PROTOBUF_FIELD_OFFSET(FecController_Threshold, low_bandwidth_bps_)>(
          reinterpret_cast<char*>(&low_bandwidth_bps_),
          reinterpret_cast<char*>(&other->low_bandwidth_bps_));
}

std::string FecController_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController.Threshold";
}


// ===================================================================

class FecController::_Internal {
 public:
  using HasBits = decltype(std::declval<FecController>()._has_bits_);
  static const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_enabling_threshold(const FecController* msg);
  static void set_has_fec_enabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_disabling_threshold(const FecController* msg);
  static void set_has_fec_disabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_constant_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::webrtc::audio_network_adaptor::config::FecController_Threshold&
FecController::_Internal::fec_enabling_threshold(const FecController* msg) {
  return *msg->fec_enabling_threshold_;
}
const ::webrtc::audio_network_adaptor::config::FecController_Threshold&
FecController::_Internal::fec_disabling_threshold(const FecController* msg) {
  return *msg->fec_disabling_threshold_;
}
FecController::FecController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecController)
}
FecController::FecController(const FecController& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_fec_enabling_threshold()) {
    fec_enabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecController_Threshold(*from.fec_enabling_threshold_);
  } else {
    fec_enabling_threshold_ = nullptr;
  }
  if (from._internal_has_fec_disabling_threshold()) {
    fec_disabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecController_Threshold(*from.fec_disabling_threshold_);
  } else {
    fec_disabling_threshold_ = nullptr;
  }
  time_constant_ms_ = from.time_constant_ms_;
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecController)
}

void FecController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FecController_config_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fec_enabling_threshold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_constant_ms_) -
      reinterpret_cast<char*>(&fec_enabling_threshold_)) + sizeof(time_constant_ms_));
}

FecController::~FecController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecController)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FecController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fec_enabling_threshold_;
  if (this != internal_default_instance()) delete fec_disabling_threshold_;
}

void FecController::ArenaDtor(void* object) {
  FecController* _this = reinterpret_cast< FecController* >(object);
  (void)_this;
}
void FecController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FecController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecController& FecController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FecController_config_2eproto.base);
  return *internal_default_instance();
}


void FecController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fec_enabling_threshold_ != nullptr);
      fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fec_disabling_threshold_ != nullptr);
      fec_disabling_threshold_->Clear();
    }
  }
  time_constant_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_enabling_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_disabling_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_constant_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_constant_ms(&has_bits);
          time_constant_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FecController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fec_enabling_threshold(this), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fec_disabling_threshold(this), target, stream);
  }

  // optional int32 time_constant_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_constant_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecController)
  return target;
}

size_t FecController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fec_disabling_threshold_);
    }

    // optional int32 time_constant_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_constant_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecController::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FecController*>(
      &from));
}

void FecController::MergeFrom(const FecController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(from._internal_fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecController_Threshold::MergeFrom(from._internal_fec_disabling_threshold());
    }
    if (cached_has_bits & 0x00000004u) {
      time_constant_ms_ = from.time_constant_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecController::CopyFrom(const FecController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecController::IsInitialized() const {
  return true;
}

void FecController::InternalSwap(FecController* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecController, time_constant_ms_)
      + sizeof(FecController::time_constant_ms_)
      - PROTOBUF_FIELD_OFFSET(FecController, fec_enabling_threshold_)>(
          reinterpret_cast<char*>(&fec_enabling_threshold_),
          reinterpret_cast<char*>(&other->fec_enabling_threshold_));
}

std::string FecController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecController";
}


// ===================================================================

class FecControllerRplrBased_Threshold::_Internal {
 public:
  using HasBits = decltype(std::declval<FecControllerRplrBased_Threshold>()._has_bits_);
  static void set_has_low_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_bandwidth_recoverable_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_bandwidth_recoverable_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}
FecControllerRplrBased_Threshold::FecControllerRplrBased_Threshold(const FecControllerRplrBased_Threshold& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&low_bandwidth_bps_, &from.low_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
    reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
}

void FecControllerRplrBased_Threshold::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&low_bandwidth_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
      reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
}

FecControllerRplrBased_Threshold::~FecControllerRplrBased_Threshold() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FecControllerRplrBased_Threshold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FecControllerRplrBased_Threshold::ArenaDtor(void* object) {
  FecControllerRplrBased_Threshold* _this = reinterpret_cast< FecControllerRplrBased_Threshold* >(object);
  (void)_this;
}
void FecControllerRplrBased_Threshold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FecControllerRplrBased_Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecControllerRplrBased_Threshold& FecControllerRplrBased_Threshold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FecControllerRplrBased_Threshold_config_2eproto.base);
  return *internal_default_instance();
}


void FecControllerRplrBased_Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&low_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_bandwidth_recoverable_packet_loss_) -
        reinterpret_cast<char*>(&low_bandwidth_bps_)) + sizeof(high_bandwidth_recoverable_packet_loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecControllerRplrBased_Threshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 low_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_low_bandwidth_bps(&has_bits);
          low_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float low_bandwidth_recoverable_packet_loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_low_bandwidth_recoverable_packet_loss(&has_bits);
          low_bandwidth_recoverable_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 high_bandwidth_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_high_bandwidth_bps(&has_bits);
          high_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float high_bandwidth_recoverable_packet_loss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_high_bandwidth_recoverable_packet_loss(&has_bits);
          high_bandwidth_recoverable_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FecControllerRplrBased_Threshold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 low_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_low_bandwidth_bps(), target);
  }

  // optional float low_bandwidth_recoverable_packet_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_low_bandwidth_recoverable_packet_loss(), target);
  }

  // optional int32 high_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_high_bandwidth_bps(), target);
  }

  // optional float high_bandwidth_recoverable_packet_loss = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_high_bandwidth_recoverable_packet_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  return target;
}

size_t FecControllerRplrBased_Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 low_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_low_bandwidth_bps());
    }

    // optional float low_bandwidth_recoverable_packet_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 high_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_bandwidth_bps());
    }

    // optional float high_bandwidth_recoverable_packet_loss = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecControllerRplrBased_Threshold::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FecControllerRplrBased_Threshold*>(
      &from));
}

void FecControllerRplrBased_Threshold::MergeFrom(const FecControllerRplrBased_Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      low_bandwidth_bps_ = from.low_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_bandwidth_recoverable_packet_loss_ = from.low_bandwidth_recoverable_packet_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_bandwidth_bps_ = from.high_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_bandwidth_recoverable_packet_loss_ = from.high_bandwidth_recoverable_packet_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FecControllerRplrBased_Threshold::CopyFrom(const FecControllerRplrBased_Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecControllerRplrBased_Threshold::IsInitialized() const {
  return true;
}

void FecControllerRplrBased_Threshold::InternalSwap(FecControllerRplrBased_Threshold* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, high_bandwidth_recoverable_packet_loss_)
      + sizeof(FecControllerRplrBased_Threshold::high_bandwidth_recoverable_packet_loss_)
      - PROTOBUF_FIELD_OFFSET(FecControllerRplrBased_Threshold, low_bandwidth_bps_)>(
          reinterpret_cast<char*>(&low_bandwidth_bps_),
          reinterpret_cast<char*>(&other->low_bandwidth_bps_));
}

std::string FecControllerRplrBased_Threshold::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold";
}


// ===================================================================

class FecControllerRplrBased::_Internal {
 public:
  using HasBits = decltype(std::declval<FecControllerRplrBased>()._has_bits_);
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_enabling_threshold(const FecControllerRplrBased* msg);
  static void set_has_fec_enabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_disabling_threshold(const FecControllerRplrBased* msg);
  static void set_has_fec_disabling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold&
FecControllerRplrBased::_Internal::fec_enabling_threshold(const FecControllerRplrBased* msg) {
  return *msg->fec_enabling_threshold_;
}
const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold&
FecControllerRplrBased::_Internal::fec_disabling_threshold(const FecControllerRplrBased* msg) {
  return *msg->fec_disabling_threshold_;
}
FecControllerRplrBased::FecControllerRplrBased(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}
FecControllerRplrBased::FecControllerRplrBased(const FecControllerRplrBased& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_fec_enabling_threshold()) {
    fec_enabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold(*from.fec_enabling_threshold_);
  } else {
    fec_enabling_threshold_ = nullptr;
  }
  if (from._internal_has_fec_disabling_threshold()) {
    fec_disabling_threshold_ = new ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold(*from.fec_disabling_threshold_);
  } else {
    fec_disabling_threshold_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
}

void FecControllerRplrBased::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FecControllerRplrBased_config_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fec_enabling_threshold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fec_disabling_threshold_) -
      reinterpret_cast<char*>(&fec_enabling_threshold_)) + sizeof(fec_disabling_threshold_));
}

FecControllerRplrBased::~FecControllerRplrBased() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FecControllerRplrBased::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fec_enabling_threshold_;
  if (this != internal_default_instance()) delete fec_disabling_threshold_;
}

void FecControllerRplrBased::ArenaDtor(void* object) {
  FecControllerRplrBased* _this = reinterpret_cast< FecControllerRplrBased* >(object);
  (void)_this;
}
void FecControllerRplrBased::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FecControllerRplrBased::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FecControllerRplrBased& FecControllerRplrBased::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FecControllerRplrBased_config_2eproto.base);
  return *internal_default_instance();
}


void FecControllerRplrBased::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fec_enabling_threshold_ != nullptr);
      fec_enabling_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fec_disabling_threshold_ != nullptr);
      fec_disabling_threshold_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FecControllerRplrBased::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_enabling_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_disabling_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FecControllerRplrBased::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fec_enabling_threshold(this), target, stream);
  }

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fec_disabling_threshold(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  return target;
}

size_t FecControllerRplrBased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fec_enabling_threshold_);
    }

    // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fec_disabling_threshold_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecControllerRplrBased::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FecControllerRplrBased*>(
      &from));
}

void FecControllerRplrBased::MergeFrom(const FecControllerRplrBased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fec_enabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(from._internal_fec_enabling_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fec_disabling_threshold()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold::MergeFrom(from._internal_fec_disabling_threshold());
    }
  }
}

void FecControllerRplrBased::CopyFrom(const FecControllerRplrBased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecControllerRplrBased::IsInitialized() const {
  return true;
}

void FecControllerRplrBased::InternalSwap(FecControllerRplrBased* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, fec_disabling_threshold_)
      + sizeof(FecControllerRplrBased::fec_disabling_threshold_)
      - PROTOBUF_FIELD_OFFSET(FecControllerRplrBased, fec_enabling_threshold_)>(
          reinterpret_cast<char*>(&fec_enabling_threshold_),
          reinterpret_cast<char*>(&other->fec_enabling_threshold_));
}

std::string FecControllerRplrBased::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FecControllerRplrBased";
}


// ===================================================================

class FrameLengthController::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameLengthController>()._has_bits_);
  static void set_has_fl_increasing_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fl_decreasing_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fl_20ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fl_60ms_to_20ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fl_60ms_to_120ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fl_120ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fl_increase_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fl_decrease_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fl_20ms_to_40ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fl_40ms_to_20ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fl_40ms_to_60ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fl_60ms_to_40ms_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

FrameLengthController::FrameLengthController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FrameLengthController)
}
FrameLengthController::FrameLengthController(const FrameLengthController& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fl_increasing_packet_loss_fraction_, &from.fl_increasing_packet_loss_fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&fl_60ms_to_40ms_bandwidth_bps_) -
    reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_60ms_to_40ms_bandwidth_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FrameLengthController)
}

void FrameLengthController::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fl_60ms_to_40ms_bandwidth_bps_) -
      reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_60ms_to_40ms_bandwidth_bps_));
}

FrameLengthController::~FrameLengthController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FrameLengthController)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FrameLengthController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameLengthController::ArenaDtor(void* object) {
  FrameLengthController* _this = reinterpret_cast< FrameLengthController* >(object);
  (void)_this;
}
void FrameLengthController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameLengthController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameLengthController& FrameLengthController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameLengthController_config_2eproto.base);
  return *internal_default_instance();
}


void FrameLengthController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&fl_increasing_packet_loss_fraction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_)) + sizeof(fl_decrease_overhead_offset_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&fl_20ms_to_40ms_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fl_60ms_to_40ms_bandwidth_bps_) -
        reinterpret_cast<char*>(&fl_20ms_to_40ms_bandwidth_bps_)) + sizeof(fl_60ms_to_40ms_bandwidth_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameLengthController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fl_increasing_packet_loss_fraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fl_increasing_packet_loss_fraction(&has_bits);
          fl_increasing_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fl_decreasing_packet_loss_fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fl_decreasing_packet_loss_fraction(&has_bits);
          fl_decreasing_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fl_20ms_to_60ms_bandwidth_bps(&has_bits);
          fl_20ms_to_60ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fl_60ms_to_20ms_bandwidth_bps(&has_bits);
          fl_60ms_to_20ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fl_60ms_to_120ms_bandwidth_bps(&has_bits);
          fl_60ms_to_120ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fl_120ms_to_60ms_bandwidth_bps(&has_bits);
          fl_120ms_to_60ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_increase_overhead_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fl_increase_overhead_offset(&has_bits);
          fl_increase_overhead_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_decrease_overhead_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fl_decrease_overhead_offset(&has_bits);
          fl_decrease_overhead_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fl_20ms_to_40ms_bandwidth_bps(&has_bits);
          fl_20ms_to_40ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fl_40ms_to_20ms_bandwidth_bps(&has_bits);
          fl_40ms_to_20ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fl_40ms_to_60ms_bandwidth_bps(&has_bits);
          fl_40ms_to_60ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_fl_60ms_to_40ms_bandwidth_bps(&has_bits);
          fl_60ms_to_40ms_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameLengthController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fl_increasing_packet_loss_fraction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fl_increasing_packet_loss_fraction(), target);
  }

  // optional float fl_decreasing_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fl_decreasing_packet_loss_fraction(), target);
  }

  // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fl_20ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fl_60ms_to_20ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_fl_60ms_to_120ms_bandwidth_bps(), target);
  }

  // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_fl_120ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_increase_overhead_offset = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fl_increase_overhead_offset(), target);
  }

  // optional int32 fl_decrease_overhead_offset = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_fl_decrease_overhead_offset(), target);
  }

  // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fl_20ms_to_40ms_bandwidth_bps(), target);
  }

  // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_fl_40ms_to_20ms_bandwidth_bps(), target);
  }

  // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_fl_40ms_to_60ms_bandwidth_bps(), target);
  }

  // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_fl_60ms_to_40ms_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FrameLengthController)
  return target;
}

size_t FrameLengthController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float fl_increasing_packet_loss_fraction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fl_decreasing_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_20ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_60ms_to_20ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_60ms_to_120ms_bandwidth_bps());
    }

    // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_120ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_increase_overhead_offset = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_decrease_overhead_offset());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 fl_20ms_to_40ms_bandwidth_bps = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_20ms_to_40ms_bandwidth_bps());
    }

    // optional int32 fl_40ms_to_20ms_bandwidth_bps = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_40ms_to_20ms_bandwidth_bps());
    }

    // optional int32 fl_40ms_to_60ms_bandwidth_bps = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_40ms_to_60ms_bandwidth_bps());
    }

    // optional int32 fl_60ms_to_40ms_bandwidth_bps = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_60ms_to_40ms_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameLengthController::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameLengthController*>(
      &from));
}

void FrameLengthController::MergeFrom(const FrameLengthController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fl_increasing_packet_loss_fraction_ = from.fl_increasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000002u) {
      fl_decreasing_packet_loss_fraction_ = from.fl_decreasing_packet_loss_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      fl_20ms_to_60ms_bandwidth_bps_ = from.fl_20ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000008u) {
      fl_60ms_to_20ms_bandwidth_bps_ = from.fl_60ms_to_20ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000010u) {
      fl_60ms_to_120ms_bandwidth_bps_ = from.fl_60ms_to_120ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000020u) {
      fl_120ms_to_60ms_bandwidth_bps_ = from.fl_120ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000040u) {
      fl_increase_overhead_offset_ = from.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      fl_decrease_overhead_offset_ = from.fl_decrease_overhead_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      fl_20ms_to_40ms_bandwidth_bps_ = from.fl_20ms_to_40ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000200u) {
      fl_40ms_to_20ms_bandwidth_bps_ = from.fl_40ms_to_20ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000400u) {
      fl_40ms_to_60ms_bandwidth_bps_ = from.fl_40ms_to_60ms_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000800u) {
      fl_60ms_to_40ms_bandwidth_bps_ = from.fl_60ms_to_40ms_bandwidth_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameLengthController::CopyFrom(const FrameLengthController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FrameLengthController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLengthController::IsInitialized() const {
  return true;
}

void FrameLengthController::InternalSwap(FrameLengthController* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameLengthController, fl_60ms_to_40ms_bandwidth_bps_)
      + sizeof(FrameLengthController::fl_60ms_to_40ms_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(FrameLengthController, fl_increasing_packet_loss_fraction_)>(
          reinterpret_cast<char*>(&fl_increasing_packet_loss_fraction_),
          reinterpret_cast<char*>(&other->fl_increasing_packet_loss_fraction_));
}

std::string FrameLengthController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FrameLengthController";
}


// ===================================================================

class FrameLengthControllerV2::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameLengthControllerV2>()._has_bits_);
  static void set_has_min_payload_bitrate_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_slow_adaptation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FrameLengthControllerV2::FrameLengthControllerV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
}
FrameLengthControllerV2::FrameLengthControllerV2(const FrameLengthControllerV2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&min_payload_bitrate_bps_, &from.min_payload_bitrate_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_slow_adaptation_) -
    reinterpret_cast<char*>(&min_payload_bitrate_bps_)) + sizeof(use_slow_adaptation_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
}

void FrameLengthControllerV2::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_payload_bitrate_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_slow_adaptation_) -
      reinterpret_cast<char*>(&min_payload_bitrate_bps_)) + sizeof(use_slow_adaptation_));
}

FrameLengthControllerV2::~FrameLengthControllerV2() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FrameLengthControllerV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameLengthControllerV2::ArenaDtor(void* object) {
  FrameLengthControllerV2* _this = reinterpret_cast< FrameLengthControllerV2* >(object);
  (void)_this;
}
void FrameLengthControllerV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameLengthControllerV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameLengthControllerV2& FrameLengthControllerV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameLengthControllerV2_config_2eproto.base);
  return *internal_default_instance();
}


void FrameLengthControllerV2::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_payload_bitrate_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_slow_adaptation_) -
        reinterpret_cast<char*>(&min_payload_bitrate_bps_)) + sizeof(use_slow_adaptation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FrameLengthControllerV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 min_payload_bitrate_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_payload_bitrate_bps(&has_bits);
          min_payload_bitrate_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_slow_adaptation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_slow_adaptation(&has_bits);
          use_slow_adaptation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameLengthControllerV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_payload_bitrate_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_payload_bitrate_bps(), target);
  }

  // optional bool use_slow_adaptation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_slow_adaptation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  return target;
}

size_t FrameLengthControllerV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 min_payload_bitrate_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_payload_bitrate_bps());
    }

    // optional bool use_slow_adaptation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameLengthControllerV2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameLengthControllerV2*>(
      &from));
}

void FrameLengthControllerV2::MergeFrom(const FrameLengthControllerV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_payload_bitrate_bps_ = from.min_payload_bitrate_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_slow_adaptation_ = from.use_slow_adaptation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameLengthControllerV2::CopyFrom(const FrameLengthControllerV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.FrameLengthControllerV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLengthControllerV2::IsInitialized() const {
  return true;
}

void FrameLengthControllerV2::InternalSwap(FrameLengthControllerV2* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, use_slow_adaptation_)
      + sizeof(FrameLengthControllerV2::use_slow_adaptation_)
      - PROTOBUF_FIELD_OFFSET(FrameLengthControllerV2, min_payload_bitrate_bps_)>(
          reinterpret_cast<char*>(&min_payload_bitrate_bps_),
          reinterpret_cast<char*>(&other->min_payload_bitrate_bps_));
}

std::string FrameLengthControllerV2::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.FrameLengthControllerV2";
}


// ===================================================================

class ChannelController::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelController>()._has_bits_);
  static void set_has_channel_1_to_2_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_2_to_1_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelController::ChannelController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.ChannelController)
}
ChannelController::ChannelController(const ChannelController& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&channel_1_to_2_bandwidth_bps_, &from.channel_1_to_2_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
    reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.ChannelController)
}

void ChannelController::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
      reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
}

ChannelController::~ChannelController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ChannelController)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChannelController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelController::ArenaDtor(void* object) {
  ChannelController* _this = reinterpret_cast< ChannelController* >(object);
  (void)_this;
}
void ChannelController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelController& ChannelController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelController_config_2eproto.base);
  return *internal_default_instance();
}


void ChannelController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&channel_1_to_2_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_2_to_1_bandwidth_bps_) -
        reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_)) + sizeof(channel_2_to_1_bandwidth_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChannelController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 channel_1_to_2_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_1_to_2_bandwidth_bps(&has_bits);
          channel_1_to_2_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channel_2_to_1_bandwidth_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_2_to_1_bandwidth_bps(&has_bits);
          channel_2_to_1_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.ChannelController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channel_1_to_2_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel_1_to_2_bandwidth_bps(), target);
  }

  // optional int32 channel_2_to_1_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel_2_to_1_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.ChannelController)
  return target;
}

size_t ChannelController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ChannelController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 channel_1_to_2_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel_1_to_2_bandwidth_bps());
    }

    // optional int32 channel_2_to_1_bandwidth_bps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channel_2_to_1_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelController::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChannelController*>(
      &from));
}

void ChannelController::MergeFrom(const ChannelController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_1_to_2_bandwidth_bps_ = from.channel_1_to_2_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_2_to_1_bandwidth_bps_ = from.channel_2_to_1_bandwidth_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelController::CopyFrom(const ChannelController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ChannelController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelController::IsInitialized() const {
  return true;
}

void ChannelController::InternalSwap(ChannelController* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelController, channel_2_to_1_bandwidth_bps_)
      + sizeof(ChannelController::channel_2_to_1_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(ChannelController, channel_1_to_2_bandwidth_bps_)>(
          reinterpret_cast<char*>(&channel_1_to_2_bandwidth_bps_),
          reinterpret_cast<char*>(&other->channel_1_to_2_bandwidth_bps_));
}

std::string ChannelController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ChannelController";
}


// ===================================================================

class DtxController::_Internal {
 public:
  using HasBits = decltype(std::declval<DtxController>()._has_bits_);
  static void set_has_dtx_enabling_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtx_disabling_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DtxController::DtxController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.DtxController)
}
DtxController::DtxController(const DtxController& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dtx_enabling_bandwidth_bps_, &from.dtx_enabling_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
    reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.DtxController)
}

void DtxController::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
      reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
}

DtxController::~DtxController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.DtxController)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DtxController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DtxController::ArenaDtor(void* object) {
  DtxController* _this = reinterpret_cast< DtxController* >(object);
  (void)_this;
}
void DtxController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DtxController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtxController& DtxController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DtxController_config_2eproto.base);
  return *internal_default_instance();
}


void DtxController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.DtxController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dtx_enabling_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtx_disabling_bandwidth_bps_) -
        reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_)) + sizeof(dtx_disabling_bandwidth_bps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DtxController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dtx_enabling_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dtx_enabling_bandwidth_bps(&has_bits);
          dtx_enabling_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dtx_disabling_bandwidth_bps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dtx_disabling_bandwidth_bps(&has_bits);
          dtx_disabling_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DtxController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.DtxController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dtx_enabling_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dtx_enabling_bandwidth_bps(), target);
  }

  // optional int32 dtx_disabling_bandwidth_bps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dtx_disabling_bandwidth_bps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.DtxController)
  return target;
}

size_t DtxController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.DtxController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dtx_enabling_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dtx_enabling_bandwidth_bps());
    }

    // optional int32 dtx_disabling_bandwidth_bps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dtx_disabling_bandwidth_bps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtxController::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DtxController*>(
      &from));
}

void DtxController::MergeFrom(const DtxController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.DtxController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dtx_enabling_bandwidth_bps_ = from.dtx_enabling_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtx_disabling_bandwidth_bps_ = from.dtx_disabling_bandwidth_bps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtxController::CopyFrom(const DtxController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.DtxController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtxController::IsInitialized() const {
  return true;
}

void DtxController::InternalSwap(DtxController* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DtxController, dtx_disabling_bandwidth_bps_)
      + sizeof(DtxController::dtx_disabling_bandwidth_bps_)
      - PROTOBUF_FIELD_OFFSET(DtxController, dtx_enabling_bandwidth_bps_)>(
          reinterpret_cast<char*>(&dtx_enabling_bandwidth_bps_),
          reinterpret_cast<char*>(&other->dtx_enabling_bandwidth_bps_));
}

std::string DtxController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.DtxController";
}


// ===================================================================

class BitrateController::_Internal {
 public:
  using HasBits = decltype(std::declval<BitrateController>()._has_bits_);
  static void set_has_fl_increase_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fl_decrease_overhead_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BitrateController::BitrateController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.BitrateController)
}
BitrateController::BitrateController(const BitrateController& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&fl_increase_overhead_offset_, &from.fl_increase_overhead_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
    reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.BitrateController)
}

void BitrateController::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fl_increase_overhead_offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
      reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
}

BitrateController::~BitrateController() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.BitrateController)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BitrateController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BitrateController::ArenaDtor(void* object) {
  BitrateController* _this = reinterpret_cast< BitrateController* >(object);
  (void)_this;
}
void BitrateController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BitrateController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitrateController& BitrateController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitrateController_config_2eproto.base);
  return *internal_default_instance();
}


void BitrateController::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fl_increase_overhead_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fl_decrease_overhead_offset_) -
        reinterpret_cast<char*>(&fl_increase_overhead_offset_)) + sizeof(fl_decrease_overhead_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BitrateController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fl_increase_overhead_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fl_increase_overhead_offset(&has_bits);
          fl_increase_overhead_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fl_decrease_overhead_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fl_decrease_overhead_offset(&has_bits);
          fl_decrease_overhead_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitrateController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.BitrateController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fl_increase_overhead_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fl_increase_overhead_offset(), target);
  }

  // optional int32 fl_decrease_overhead_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fl_decrease_overhead_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.BitrateController)
  return target;
}

size_t BitrateController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.BitrateController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 fl_increase_overhead_offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_increase_overhead_offset());
    }

    // optional int32 fl_decrease_overhead_offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fl_decrease_overhead_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitrateController::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BitrateController*>(
      &from));
}

void BitrateController::MergeFrom(const BitrateController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fl_increase_overhead_offset_ = from.fl_increase_overhead_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      fl_decrease_overhead_offset_ = from.fl_decrease_overhead_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitrateController::CopyFrom(const BitrateController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.BitrateController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitrateController::IsInitialized() const {
  return true;
}

void BitrateController::InternalSwap(BitrateController* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BitrateController, fl_decrease_overhead_offset_)
      + sizeof(BitrateController::fl_decrease_overhead_offset_)
      - PROTOBUF_FIELD_OFFSET(BitrateController, fl_increase_overhead_offset_)>(
          reinterpret_cast<char*>(&fl_increase_overhead_offset_),
          reinterpret_cast<char*>(&other->fl_increase_overhead_offset_));
}

std::string BitrateController::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.BitrateController";
}


// ===================================================================

class Controller_ScoringPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<Controller_ScoringPoint>()._has_bits_);
  static void set_has_uplink_bandwidth_bps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uplink_packet_loss_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Controller_ScoringPoint::Controller_ScoringPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}
Controller_ScoringPoint::Controller_ScoringPoint(const Controller_ScoringPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&uplink_bandwidth_bps_, &from.uplink_bandwidth_bps_,
    static_cast<size_t>(reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
    reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
}

void Controller_ScoringPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&uplink_bandwidth_bps_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
      reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
}

Controller_ScoringPoint::~Controller_ScoringPoint() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Controller_ScoringPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Controller_ScoringPoint::ArenaDtor(void* object) {
  Controller_ScoringPoint* _this = reinterpret_cast< Controller_ScoringPoint* >(object);
  (void)_this;
}
void Controller_ScoringPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Controller_ScoringPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Controller_ScoringPoint& Controller_ScoringPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Controller_ScoringPoint_config_2eproto.base);
  return *internal_default_instance();
}


void Controller_ScoringPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uplink_bandwidth_bps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uplink_packet_loss_fraction_) -
        reinterpret_cast<char*>(&uplink_bandwidth_bps_)) + sizeof(uplink_packet_loss_fraction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Controller_ScoringPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uplink_bandwidth_bps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uplink_bandwidth_bps(&has_bits);
          uplink_bandwidth_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float uplink_packet_loss_fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_uplink_packet_loss_fraction(&has_bits);
          uplink_packet_loss_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Controller_ScoringPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uplink_bandwidth_bps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uplink_bandwidth_bps(), target);
  }

  // optional float uplink_packet_loss_fraction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_uplink_packet_loss_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  return target;
}

size_t Controller_ScoringPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 uplink_bandwidth_bps = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_uplink_bandwidth_bps());
    }

    // optional float uplink_packet_loss_fraction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller_ScoringPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Controller_ScoringPoint*>(
      &from));
}

void Controller_ScoringPoint::MergeFrom(const Controller_ScoringPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uplink_bandwidth_bps_ = from.uplink_bandwidth_bps_;
    }
    if (cached_has_bits & 0x00000002u) {
      uplink_packet_loss_fraction_ = from.uplink_packet_loss_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Controller_ScoringPoint::CopyFrom(const Controller_ScoringPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller_ScoringPoint::IsInitialized() const {
  return true;
}

void Controller_ScoringPoint::InternalSwap(Controller_ScoringPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, uplink_packet_loss_fraction_)
      + sizeof(Controller_ScoringPoint::uplink_packet_loss_fraction_)
      - PROTOBUF_FIELD_OFFSET(Controller_ScoringPoint, uplink_bandwidth_bps_)>(
          reinterpret_cast<char*>(&uplink_bandwidth_bps_),
          reinterpret_cast<char*>(&other->uplink_bandwidth_bps_));
}

std::string Controller_ScoringPoint::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller.ScoringPoint";
}


// ===================================================================

class Controller::_Internal {
 public:
  using HasBits = decltype(std::declval<Controller>()._has_bits_);
  static const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& scoring_point(const Controller* msg);
  static void set_has_scoring_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::webrtc::audio_network_adaptor::config::FecController& fec_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FrameLengthController& frame_length_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::ChannelController& channel_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::DtxController& dtx_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::BitrateController& bitrate_controller(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& fec_controller_rplr_based(const Controller* msg);
  static const ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2& frame_length_controller_v2(const Controller* msg);
};

const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint&
Controller::_Internal::scoring_point(const Controller* msg) {
  return *msg->scoring_point_;
}
const ::webrtc::audio_network_adaptor::config::FecController&
Controller::_Internal::fec_controller(const Controller* msg) {
  return *msg->controller_.fec_controller_;
}
const ::webrtc::audio_network_adaptor::config::FrameLengthController&
Controller::_Internal::frame_length_controller(const Controller* msg) {
  return *msg->controller_.frame_length_controller_;
}
const ::webrtc::audio_network_adaptor::config::ChannelController&
Controller::_Internal::channel_controller(const Controller* msg) {
  return *msg->controller_.channel_controller_;
}
const ::webrtc::audio_network_adaptor::config::DtxController&
Controller::_Internal::dtx_controller(const Controller* msg) {
  return *msg->controller_.dtx_controller_;
}
const ::webrtc::audio_network_adaptor::config::BitrateController&
Controller::_Internal::bitrate_controller(const Controller* msg) {
  return *msg->controller_.bitrate_controller_;
}
const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased&
Controller::_Internal::fec_controller_rplr_based(const Controller* msg) {
  return *msg->controller_.fec_controller_rplr_based_;
}
const ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2&
Controller::_Internal::frame_length_controller_v2(const Controller* msg) {
  return *msg->controller_.frame_length_controller_v2_;
}
void Controller::set_allocated_fec_controller(::webrtc::audio_network_adaptor::config::FecController* fec_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (fec_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fec_controller);
    if (message_arena != submessage_arena) {
      fec_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fec_controller, submessage_arena);
    }
    set_has_fec_controller();
    controller_.fec_controller_ = fec_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller)
}
void Controller::set_allocated_frame_length_controller(::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (frame_length_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame_length_controller);
    if (message_arena != submessage_arena) {
      frame_length_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_length_controller, submessage_arena);
    }
    set_has_frame_length_controller();
    controller_.frame_length_controller_ = frame_length_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
}
void Controller::set_allocated_channel_controller(::webrtc::audio_network_adaptor::config::ChannelController* channel_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (channel_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_controller);
    if (message_arena != submessage_arena) {
      channel_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_controller, submessage_arena);
    }
    set_has_channel_controller();
    controller_.channel_controller_ = channel_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.channel_controller)
}
void Controller::set_allocated_dtx_controller(::webrtc::audio_network_adaptor::config::DtxController* dtx_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (dtx_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dtx_controller);
    if (message_arena != submessage_arena) {
      dtx_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dtx_controller, submessage_arena);
    }
    set_has_dtx_controller();
    controller_.dtx_controller_ = dtx_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
}
void Controller::set_allocated_bitrate_controller(::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (bitrate_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bitrate_controller);
    if (message_arena != submessage_arena) {
      bitrate_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitrate_controller, submessage_arena);
    }
    set_has_bitrate_controller();
    controller_.bitrate_controller_ = bitrate_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
}
void Controller::set_allocated_fec_controller_rplr_based(::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (fec_controller_rplr_based) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fec_controller_rplr_based);
    if (message_arena != submessage_arena) {
      fec_controller_rplr_based = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fec_controller_rplr_based, submessage_arena);
    }
    set_has_fec_controller_rplr_based();
    controller_.fec_controller_rplr_based_ = fec_controller_rplr_based;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
}
void Controller::set_allocated_frame_length_controller_v2(::webrtc::audio_network_adaptor::config::FrameLengthControllerV2* frame_length_controller_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_controller();
  if (frame_length_controller_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame_length_controller_v2);
    if (message_arena != submessage_arena) {
      frame_length_controller_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_length_controller_v2, submessage_arena);
    }
    set_has_frame_length_controller_v2();
    controller_.frame_length_controller_v2_ = frame_length_controller_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.frame_length_controller_v2)
}
Controller::Controller(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.Controller)
}
Controller::Controller(const Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_scoring_point()) {
    scoring_point_ = new ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint(*from.scoring_point_);
  } else {
    scoring_point_ = nullptr;
  }
  clear_has_controller();
  switch (from.controller_case()) {
    case kFecController: {
      _internal_mutable_fec_controller()->::webrtc::audio_network_adaptor::config::FecController::MergeFrom(from._internal_fec_controller());
      break;
    }
    case kFrameLengthController: {
      _internal_mutable_frame_length_controller()->::webrtc::audio_network_adaptor::config::FrameLengthController::MergeFrom(from._internal_frame_length_controller());
      break;
    }
    case kChannelController: {
      _internal_mutable_channel_controller()->::webrtc::audio_network_adaptor::config::ChannelController::MergeFrom(from._internal_channel_controller());
      break;
    }
    case kDtxController: {
      _internal_mutable_dtx_controller()->::webrtc::audio_network_adaptor::config::DtxController::MergeFrom(from._internal_dtx_controller());
      break;
    }
    case kBitrateController: {
      _internal_mutable_bitrate_controller()->::webrtc::audio_network_adaptor::config::BitrateController::MergeFrom(from._internal_bitrate_controller());
      break;
    }
    case kFecControllerRplrBased: {
      _internal_mutable_fec_controller_rplr_based()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased::MergeFrom(from._internal_fec_controller_rplr_based());
      break;
    }
    case kFrameLengthControllerV2: {
      _internal_mutable_frame_length_controller_v2()->::webrtc::audio_network_adaptor::config::FrameLengthControllerV2::MergeFrom(from._internal_frame_length_controller_v2());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.Controller)
}

void Controller::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Controller_config_2eproto.base);
  scoring_point_ = nullptr;
  clear_has_controller();
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.Controller)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Controller::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scoring_point_;
  if (has_controller()) {
    clear_controller();
  }
}

void Controller::ArenaDtor(void* object) {
  Controller* _this = reinterpret_cast< Controller* >(object);
  (void)_this;
}
void Controller::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Controller& Controller::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Controller_config_2eproto.base);
  return *internal_default_instance();
}


void Controller::clear_controller() {
// @@protoc_insertion_point(one_of_clear_start:webrtc.audio_network_adaptor.config.Controller)
  switch (controller_case()) {
    case kFecController: {
      if (GetArena() == nullptr) {
        delete controller_.fec_controller_;
      }
      break;
    }
    case kFrameLengthController: {
      if (GetArena() == nullptr) {
        delete controller_.frame_length_controller_;
      }
      break;
    }
    case kChannelController: {
      if (GetArena() == nullptr) {
        delete controller_.channel_controller_;
      }
      break;
    }
    case kDtxController: {
      if (GetArena() == nullptr) {
        delete controller_.dtx_controller_;
      }
      break;
    }
    case kBitrateController: {
      if (GetArena() == nullptr) {
        delete controller_.bitrate_controller_;
      }
      break;
    }
    case kFecControllerRplrBased: {
      if (GetArena() == nullptr) {
        delete controller_.fec_controller_rplr_based_;
      }
      break;
    }
    case kFrameLengthControllerV2: {
      if (GetArena() == nullptr) {
        delete controller_.frame_length_controller_v2_;
      }
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTROLLER_NOT_SET;
}


void Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scoring_point_ != nullptr);
    scoring_point_->Clear();
  }
  clear_controller();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Controller::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoring_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_length_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_dtx_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitrate_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_fec_controller_rplr_based(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .webrtc.audio_network_adaptor.config.FrameLengthControllerV2 frame_length_controller_v2 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_length_controller_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Controller::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scoring_point(this), target, stream);
  }

  switch (controller_case()) {
    case kFecController: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::fec_controller(this), target, stream);
      break;
    }
    case kFrameLengthController: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::frame_length_controller(this), target, stream);
      break;
    }
    case kChannelController: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::channel_controller(this), target, stream);
      break;
    }
    case kDtxController: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::dtx_controller(this), target, stream);
      break;
    }
    case kBitrateController: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::bitrate_controller(this), target, stream);
      break;
    }
    case kFecControllerRplrBased: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          26, _Internal::fec_controller_rplr_based(this), target, stream);
      break;
    }
    case kFrameLengthControllerV2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          27, _Internal::frame_length_controller_v2(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.Controller)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scoring_point_);
  }

  switch (controller_case()) {
    // .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
    case kFecController: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.fec_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
    case kFrameLengthController: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.frame_length_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
    case kChannelController: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.channel_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
    case kDtxController: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.dtx_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
    case kBitrateController: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.bitrate_controller_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
    case kFecControllerRplrBased: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.fec_controller_rplr_based_);
      break;
    }
    // .webrtc.audio_network_adaptor.config.FrameLengthControllerV2 frame_length_controller_v2 = 27;
    case kFrameLengthControllerV2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controller_.frame_length_controller_v2_);
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Controller*>(
      &from));
}

void Controller::MergeFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scoring_point()) {
    _internal_mutable_scoring_point()->::webrtc::audio_network_adaptor::config::Controller_ScoringPoint::MergeFrom(from._internal_scoring_point());
  }
  switch (from.controller_case()) {
    case kFecController: {
      _internal_mutable_fec_controller()->::webrtc::audio_network_adaptor::config::FecController::MergeFrom(from._internal_fec_controller());
      break;
    }
    case kFrameLengthController: {
      _internal_mutable_frame_length_controller()->::webrtc::audio_network_adaptor::config::FrameLengthController::MergeFrom(from._internal_frame_length_controller());
      break;
    }
    case kChannelController: {
      _internal_mutable_channel_controller()->::webrtc::audio_network_adaptor::config::ChannelController::MergeFrom(from._internal_channel_controller());
      break;
    }
    case kDtxController: {
      _internal_mutable_dtx_controller()->::webrtc::audio_network_adaptor::config::DtxController::MergeFrom(from._internal_dtx_controller());
      break;
    }
    case kBitrateController: {
      _internal_mutable_bitrate_controller()->::webrtc::audio_network_adaptor::config::BitrateController::MergeFrom(from._internal_bitrate_controller());
      break;
    }
    case kFecControllerRplrBased: {
      _internal_mutable_fec_controller_rplr_based()->::webrtc::audio_network_adaptor::config::FecControllerRplrBased::MergeFrom(from._internal_fec_controller_rplr_based());
      break;
    }
    case kFrameLengthControllerV2: {
      _internal_mutable_frame_length_controller_v2()->::webrtc::audio_network_adaptor::config::FrameLengthControllerV2::MergeFrom(from._internal_frame_length_controller_v2());
      break;
    }
    case CONTROLLER_NOT_SET: {
      break;
    }
  }
}

void Controller::CopyFrom(const Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const {
  return true;
}

void Controller::InternalSwap(Controller* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scoring_point_, other->scoring_point_);
  swap(controller_, other->controller_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Controller::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.Controller";
}


// ===================================================================

class ControllerManager::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerManager>()._has_bits_);
  static void set_has_min_reordering_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_reordering_squared_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ControllerManager::ControllerManager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  controllers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}
ControllerManager::ControllerManager(const ControllerManager& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      controllers_(from.controllers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&min_reordering_time_ms_, &from.min_reordering_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_reordering_squared_distance_) -
    reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
  // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.config.ControllerManager)
}

void ControllerManager::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerManager_config_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_reordering_time_ms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_reordering_squared_distance_) -
      reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
}

ControllerManager::~ControllerManager() {
  // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.config.ControllerManager)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ControllerManager::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControllerManager::ArenaDtor(void* object) {
  ControllerManager* _this = reinterpret_cast< ControllerManager* >(object);
  (void)_this;
}
void ControllerManager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerManager& ControllerManager::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerManager_config_2eproto.base);
  return *internal_default_instance();
}


void ControllerManager::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controllers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_reordering_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_reordering_squared_distance_) -
        reinterpret_cast<char*>(&min_reordering_time_ms_)) + sizeof(min_reordering_squared_distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ControllerManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controllers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 min_reordering_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_reordering_time_ms(&has_bits);
          min_reordering_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_reordering_squared_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_reordering_squared_distance(&has_bits);
          min_reordering_squared_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerManager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:webrtc.audio_network_adaptor.config.ControllerManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controllers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_controllers(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 min_reordering_time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_reordering_time_ms(), target);
  }

  // optional float min_reordering_squared_distance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_reordering_squared_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:webrtc.audio_network_adaptor.config.ControllerManager)
  return target;
}

size_t ControllerManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.config.ControllerManager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  total_size += 1UL * this->_internal_controllers_size();
  for (const auto& msg : this->controllers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 min_reordering_time_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_reordering_time_ms());
    }

    // optional float min_reordering_squared_distance = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerManager::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ControllerManager*>(
      &from));
}

void ControllerManager::MergeFrom(const ControllerManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controllers_.MergeFrom(from.controllers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_reordering_time_ms_ = from.min_reordering_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_reordering_squared_distance_ = from.min_reordering_squared_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerManager::CopyFrom(const ControllerManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.config.ControllerManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerManager::IsInitialized() const {
  return true;
}

void ControllerManager::InternalSwap(ControllerManager* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controllers_.InternalSwap(&other->controllers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerManager, min_reordering_squared_distance_)
      + sizeof(ControllerManager::min_reordering_squared_distance_)
      - PROTOBUF_FIELD_OFFSET(ControllerManager, min_reordering_time_ms_)>(
          reinterpret_cast<char*>(&min_reordering_time_ms_),
          reinterpret_cast<char*>(&other->min_reordering_time_ms_));
}

std::string ControllerManager::GetTypeName() const {
  return "webrtc.audio_network_adaptor.config.ControllerManager";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FecController_Threshold* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecController_Threshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FecController_Threshold >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FecController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FecController >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FrameLengthController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FrameLengthController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FrameLengthController >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::FrameLengthControllerV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::ChannelController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::ChannelController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::ChannelController >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::DtxController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::DtxController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::DtxController >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::BitrateController* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::BitrateController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::BitrateController >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::Controller* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::Controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::Controller >(arena);
}
template<> PROTOBUF_NOINLINE ::webrtc::audio_network_adaptor::config::ControllerManager* Arena::CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::ControllerManager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::webrtc::audio_network_adaptor::config::ControllerManager >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
